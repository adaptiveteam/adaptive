package postponedEvent
// This file has been automatically generated by `adaptive/scripts`
// The changes will be overridden by the next automatic generation.
import (
	"time"
	"github.com/aws/aws-sdk-go/aws"
	awsutils "github.com/adaptiveteam/adaptive/aws-utils-go"
	common "github.com/adaptiveteam/adaptive/daos/common"
	core "github.com/adaptiveteam/adaptive/core-utils-go"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/pkg/errors"
	"fmt"
	"encoding/json"
	"strings"
)

type PostponedEvent struct  {
	ID string `json:"id"`
	// UserId is the Id of the user to send an engagement to
	// This usually corresponds to the platform user id
	UserID string `json:"user_id"`
	PlatformID common.PlatformID `json:"platform_id"`
	// ActionPath is callback for triggering workflows
	ActionPath string `json:"action_path"`
	// ValidThrough is the last time moment when this event might still be valid
	ValidThrough string `json:"valid_through"`
	// Automatically maintained field
	CreatedAt string `json:"created_at"`
	// Automatically maintained field
	ModifiedAt string `json:"modified_at"`
}

// CollectEmptyFields returns entity field names that are empty.
// It also returns the boolean ok-flag if the list is empty.
func (postponedEvent PostponedEvent)CollectEmptyFields() (emptyFields []string, ok bool) {
	if postponedEvent.ID == "" { emptyFields = append(emptyFields, "ID")}
	if postponedEvent.UserID == "" { emptyFields = append(emptyFields, "UserID")}
	if postponedEvent.PlatformID == "" { emptyFields = append(emptyFields, "PlatformID")}
	if postponedEvent.ActionPath == "" { emptyFields = append(emptyFields, "ActionPath")}
	if postponedEvent.ValidThrough == "" { emptyFields = append(emptyFields, "ValidThrough")}
	ok = len(emptyFields) == 0
	return
}
// ToJSON returns json string
func (postponedEvent PostponedEvent) ToJSON() (string, error) {
	b, err := json.Marshal(postponedEvent)
	return string(b), err
}

type DAO interface {
	Create(postponedEvent PostponedEvent) error
	CreateUnsafe(postponedEvent PostponedEvent)
	Read(id string) (postponedEvent PostponedEvent, err error)
	ReadUnsafe(id string) (postponedEvent PostponedEvent)
	ReadOrEmpty(id string) (postponedEvent []PostponedEvent, err error)
	ReadOrEmptyUnsafe(id string) (postponedEvent []PostponedEvent)
	CreateOrUpdate(postponedEvent PostponedEvent) error
	CreateOrUpdateUnsafe(postponedEvent PostponedEvent)
	Delete(id string) error
	DeleteUnsafe(id string)
	ReadByPlatformIDUserID(platformID common.PlatformID, userID string) (postponedEvent []PostponedEvent, err error)
	ReadByPlatformIDUserIDUnsafe(platformID common.PlatformID, userID string) (postponedEvent []PostponedEvent)
	ReadByUserID(userID string) (postponedEvent []PostponedEvent, err error)
	ReadByUserIDUnsafe(userID string) (postponedEvent []PostponedEvent)
}

// DAOImpl - a container for all information needed to access a DynamoDB table
type DAOImpl struct {
	Dynamo    *awsutils.DynamoRequest `json:"dynamo"`
	Namespace string                  `json:"namespace"`
	Name      string                  `json:"name"`
}

// NewDAO creates an instance of DAO that will provide access to the table
func NewDAO(dynamo *awsutils.DynamoRequest, namespace, clientID string) DAO {
	if clientID == "" { panic("Cannot create DAO without clientID") }
	return DAOImpl{Dynamo: dynamo, Namespace: namespace, 
		Name: TableName(clientID),
	}
}

// NewDAOByTableName creates an instance of DAO that will provide access to the table
func NewDAOByTableName(dynamo *awsutils.DynamoRequest, namespace, tableName string) DAO {
	if tableName == "" { panic("Cannot create DAO without tableName") }
	return DAOImpl{Dynamo: dynamo, Namespace: namespace, 
		Name: tableName,
	}
}
func TableName(clientID string) string {
	return clientID + "_postponed_event"
}

// Create saves the PostponedEvent.
func (d DAOImpl) Create(postponedEvent PostponedEvent) (err error) {
	emptyFields, ok := postponedEvent.CollectEmptyFields()
	if ok {
		postponedEvent.ModifiedAt = core.TimestampLayout.Format(time.Now())
	postponedEvent.CreatedAt = postponedEvent.ModifiedAt
	err = d.Dynamo.PutTableEntry(postponedEvent, d.Name)
	} else {
		err = fmt.Errorf("Cannot create entity with empty fields: %v", emptyFields)
	}
	return
}


// CreateUnsafe saves the PostponedEvent.
func (d DAOImpl) CreateUnsafe(postponedEvent PostponedEvent) {
	err := d.Create(postponedEvent)
	core.ErrorHandler(err, d.Namespace, fmt.Sprintf("Could not create id==%s in %s\n", postponedEvent.ID, d.Name))
}


// Read reads PostponedEvent
func (d DAOImpl) Read(id string) (out PostponedEvent, err error) {
	var outs []PostponedEvent
	outs, err = d.ReadOrEmpty(id)
	if err == nil && len(outs) == 0 {
		err = fmt.Errorf("Not found id==%s in %s\n", id, d.Name)
	}
	return
}


// ReadUnsafe reads the PostponedEvent. Panics in case of any errors
func (d DAOImpl) ReadUnsafe(id string) PostponedEvent {
	out, err := d.Read(id)
	core.ErrorHandler(err, d.Namespace, fmt.Sprintf("Error reading id==%s in %s\n", id, d.Name))
	return out
}


// ReadOrEmpty reads PostponedEvent
func (d DAOImpl) ReadOrEmpty(id string) (out []PostponedEvent, err error) {
	var outOrEmpty PostponedEvent
	ids := idParams(id)
	err = d.Dynamo.QueryTable(d.Name, ids, &outOrEmpty)
	if outOrEmpty.ID == id {
		out = append(out, outOrEmpty)
	} else if err != nil && strings.HasPrefix(err.Error(), "[NOT FOUND]") {
		err = nil // expected not-found error	
	}
	err = errors.Wrapf(err, "PostponedEvent DAO.ReadOrEmpty(id = %v) couldn't GetItem in table %s", ids, d.Name)
	return
}


// ReadOrEmptyUnsafe reads the PostponedEvent. Panics in case of any errors
func (d DAOImpl) ReadOrEmptyUnsafe(id string) []PostponedEvent {
	out, err := d.ReadOrEmpty(id)
	core.ErrorHandler(err, d.Namespace, fmt.Sprintf("Error while reading id==%s in %s\n", id, d.Name))
	return out
}


// CreateOrUpdate saves the PostponedEvent regardless of if it exists.
func (d DAOImpl) CreateOrUpdate(postponedEvent PostponedEvent) (err error) {
	postponedEvent.ModifiedAt = core.TimestampLayout.Format(time.Now())
	if postponedEvent.CreatedAt == "" { postponedEvent.CreatedAt = postponedEvent.ModifiedAt }
	
	var olds []PostponedEvent
	olds, err = d.ReadOrEmpty(postponedEvent.ID)
	err = errors.Wrapf(err, "PostponedEvent DAO.CreateOrUpdate(id = id==%s) couldn't ReadOrEmpty", postponedEvent.ID)
	if err == nil {
		if len(olds) == 0 {
			err = d.Create(postponedEvent)
			err = errors.Wrapf(err, "PostponedEvent DAO.CreateOrUpdate couldn't Create in table %s", d.Name)
		} else {
			emptyFields, ok := postponedEvent.CollectEmptyFields()
			if ok {
				old := olds[0]
				postponedEvent.ModifiedAt = core.TimestampLayout.Format(time.Now())

				key := idParams(old.ID)
				expr, exprAttributes, names := updateExpression(postponedEvent, old)
				input := dynamodb.UpdateItemInput{
					ExpressionAttributeValues: exprAttributes,
					TableName:                 aws.String(d.Name),
					Key:                       key,
					ReturnValues:              aws.String("UPDATED_NEW"),
					UpdateExpression:          aws.String(expr),
				}
				if names != nil { input.ExpressionAttributeNames = *names } // workaround for a pointer to an empty slice
				if err == nil {
					err = d.Dynamo.UpdateItemInternal(input)
				}
				err = errors.Wrapf(err, "PostponedEvent DAO.CreateOrUpdate(id = %v) couldn't UpdateTableEntry in table %s, expression='%s'", key, d.Name, expr)
			} else {
				err = fmt.Errorf("Cannot update entity with empty required fields: %v", emptyFields)
			}
		}
	}
	return 
}


// CreateOrUpdateUnsafe saves the PostponedEvent regardless of if it exists.
func (d DAOImpl) CreateOrUpdateUnsafe(postponedEvent PostponedEvent) {
	err := d.CreateOrUpdate(postponedEvent)
	core.ErrorHandler(err, d.Namespace, fmt.Sprintf("could not create or update %v in %s\n", postponedEvent, d.Name))
}


// Delete removes PostponedEvent from db
func (d DAOImpl)Delete(id string) error {
	return d.Dynamo.DeleteEntry(d.Name, idParams(id))
}


// DeleteUnsafe deletes PostponedEvent and panics in case of errors.
func (d DAOImpl)DeleteUnsafe(id string) {
	err := d.Delete(id)
	core.ErrorHandler(err, d.Namespace, fmt.Sprintf("Could not delete id==%s in %s\n", id, d.Name))
}


func (d DAOImpl)ReadByPlatformIDUserID(platformID common.PlatformID, userID string) (out []PostponedEvent, err error) {
	var instances []PostponedEvent
	err = d.Dynamo.QueryTableWithIndex(d.Name, awsutils.DynamoIndexExpression{
		IndexName: "PlatformIDUserIDIndex",
		Condition: "platform_id = :a0 and user_id = :a1",
		Attributes: map[string]interface{}{
			":a0": platformID,
			":a1": userID,
		},
	}, map[string]string{}, true, -1, &instances)
	out = instances
	return
}


func (d DAOImpl)ReadByPlatformIDUserIDUnsafe(platformID common.PlatformID, userID string) (out []PostponedEvent) {
	out, err := d.ReadByPlatformIDUserID(platformID, userID)
	core.ErrorHandler(err, d.Namespace, fmt.Sprintf("Could not query PlatformIDUserIDIndex on %s table\n", d.Name))
	return
}


func (d DAOImpl)ReadByUserID(userID string) (out []PostponedEvent, err error) {
	var instances []PostponedEvent
	err = d.Dynamo.QueryTableWithIndex(d.Name, awsutils.DynamoIndexExpression{
		IndexName: "UserIDIndex",
		Condition: "user_id = :a0",
		Attributes: map[string]interface{}{
			":a0": userID,
		},
	}, map[string]string{}, true, -1, &instances)
	out = instances
	return
}


func (d DAOImpl)ReadByUserIDUnsafe(userID string) (out []PostponedEvent) {
	out, err := d.ReadByUserID(userID)
	core.ErrorHandler(err, d.Namespace, fmt.Sprintf("Could not query UserIDIndex on %s table\n", d.Name))
	return
}

func idParams(id string) map[string]*dynamodb.AttributeValue {
	params := map[string]*dynamodb.AttributeValue {
		"id": common.DynS(id),
	}
	return params
}
func allParams(postponedEvent PostponedEvent, old PostponedEvent) (params map[string]*dynamodb.AttributeValue) {
	params = map[string]*dynamodb.AttributeValue{}
	if postponedEvent.ID != old.ID { params[":a0"] = common.DynS(postponedEvent.ID) }
	if postponedEvent.UserID != old.UserID { params[":a1"] = common.DynS(postponedEvent.UserID) }
	if postponedEvent.PlatformID != old.PlatformID { params[":a2"] = common.DynS(string(postponedEvent.PlatformID)) }
	if postponedEvent.ActionPath != old.ActionPath { params[":a3"] = common.DynS(postponedEvent.ActionPath) }
	if postponedEvent.ValidThrough != old.ValidThrough { params[":a4"] = common.DynS(postponedEvent.ValidThrough) }
	if postponedEvent.CreatedAt != old.CreatedAt { params[":a5"] = common.DynS(postponedEvent.CreatedAt) }
	if postponedEvent.ModifiedAt != old.ModifiedAt { params[":a6"] = common.DynS(postponedEvent.ModifiedAt) }
	return
}
func updateExpression(postponedEvent PostponedEvent, old PostponedEvent) (expr string, params map[string]*dynamodb.AttributeValue, namesPtr *map[string]*string) {
	var updateParts []string
	params = map[string]*dynamodb.AttributeValue{}
	names := map[string]*string{}
	if postponedEvent.ID != old.ID { updateParts = append(updateParts, "id = :a0"); params[":a0"] = common.DynS(postponedEvent.ID);  }
	if postponedEvent.UserID != old.UserID { updateParts = append(updateParts, "user_id = :a1"); params[":a1"] = common.DynS(postponedEvent.UserID);  }
	if postponedEvent.PlatformID != old.PlatformID { updateParts = append(updateParts, "platform_id = :a2"); params[":a2"] = common.DynS(string(postponedEvent.PlatformID));  }
	if postponedEvent.ActionPath != old.ActionPath { updateParts = append(updateParts, "action_path = :a3"); params[":a3"] = common.DynS(postponedEvent.ActionPath);  }
	if postponedEvent.ValidThrough != old.ValidThrough { updateParts = append(updateParts, "valid_through = :a4"); params[":a4"] = common.DynS(postponedEvent.ValidThrough);  }
	if postponedEvent.CreatedAt != old.CreatedAt { updateParts = append(updateParts, "created_at = :a5"); params[":a5"] = common.DynS(postponedEvent.CreatedAt);  }
	if postponedEvent.ModifiedAt != old.ModifiedAt { updateParts = append(updateParts, "modified_at = :a6"); params[":a6"] = common.DynS(postponedEvent.ModifiedAt);  }
	expr = "set " + strings.Join(updateParts, ", ")
	if len(names) == 0 { namesPtr = nil } else { namesPtr = &names } // workaround for ValidationException: ExpressionAttributeNames must not be empty
	return
}
