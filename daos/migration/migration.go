package migration
// This file has been automatically generated by `adaptive/scripts`
// The changes will be overridden by the next automatic generation.
import (
	"github.com/aws/aws-sdk-go/aws"
	awsutils "github.com/adaptiveteam/adaptive/aws-utils-go"
	common "github.com/adaptiveteam/adaptive/daos/common"
	core "github.com/adaptiveteam/adaptive/core-utils-go"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/pkg/errors"
	"fmt"
	"encoding/json"
	"strings"
)

type Migration struct  {
	PlatformID common.PlatformID `json:"platform_id"`
	// Human-friendly identifier of migration. Should start with 3 digits for sorting purposes. Unique within platform
	MigrationID string `json:"migration_id"`
	SuccessCount int `json:"success_count"`
	FailuresCount int `json:"failures_count"`
	// Automatically maintained field
	CreatedAt string `json:"created_at"`
	// Automatically maintained field
	ModifiedAt string `json:"modified_at,omitempty"`
}

// CollectEmptyFields returns entity field names that are empty.
// It also returns the boolean ok-flag if the list is empty.
func (migration Migration)CollectEmptyFields() (emptyFields []string, ok bool) {
	if migration.PlatformID == "" { emptyFields = append(emptyFields, "PlatformID")}
	if migration.MigrationID == "" { emptyFields = append(emptyFields, "MigrationID")}
	ok = len(emptyFields) == 0
	return
}
// ToJSON returns json string
func (migration Migration) ToJSON() (string, error) {
	b, err := json.Marshal(migration)
	return string(b), err
}

type DAO interface {
	Create(migration Migration) error
	CreateUnsafe(migration Migration)
	Read(platformID common.PlatformID, migrationID string) (migration Migration, err error)
	ReadUnsafe(platformID common.PlatformID, migrationID string) (migration Migration)
	ReadOrEmpty(platformID common.PlatformID, migrationID string) (migration []Migration, err error)
	ReadOrEmptyUnsafe(platformID common.PlatformID, migrationID string) (migration []Migration)
	CreateOrUpdate(migration Migration) error
	CreateOrUpdateUnsafe(migration Migration)
	Delete(platformID common.PlatformID, migrationID string) error
	DeleteUnsafe(platformID common.PlatformID, migrationID string)
}

// DAOImpl - a container for all information needed to access a DynamoDB table
type DAOImpl struct {
	ConnGen   common.DynamoDBConnectionGen
}

// NewDAO creates an instance of DAO that will provide access to the table
func NewDAO(dynamo *awsutils.DynamoRequest, namespace, clientID string) DAO {
	if clientID == "" { panic(errors.New("Cannot create Migration.DAO without clientID")) }
	return DAOImpl{
		ConnGen:   common.DynamoDBConnectionGen{
			Dynamo: dynamo, 
			TableNamePrefix: clientID,
		},
	}
}
// TableNameSuffixVar is a global variable that contains table name suffix.
// After renaming all tables this may be made `const`.
var TableNameSuffixVar = "_migration"

// TableName concatenates table name prefix and suffix and returns table name
func TableName(prefix string) string {
	return prefix + TableNameSuffixVar
}

// Create saves the Migration.
func (d DAOImpl) Create(migration Migration) (err error) {
	emptyFields, ok := migration.CollectEmptyFields()
	if ok {
		migration.ModifiedAt = core.CurrentRFCTimestamp()
	migration.CreatedAt = migration.ModifiedAt
	err = d.ConnGen.Dynamo.PutTableEntry(migration, TableName(d.ConnGen.TableNamePrefix))
	} else {
		err = fmt.Errorf("Cannot create entity with empty fields: %v", emptyFields)
	}
	return
}


// CreateUnsafe saves the Migration.
func (d DAOImpl) CreateUnsafe(migration Migration) {
	err2 := d.Create(migration)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("Could not create platformID==%s, migrationID==%s in %s\n", migration.PlatformID, migration.MigrationID, TableName(d.ConnGen.TableNamePrefix)))
}


// Read reads Migration
func (d DAOImpl) Read(platformID common.PlatformID, migrationID string) (out Migration, err error) {
	var outs []Migration
	outs, err = d.ReadOrEmpty(platformID, migrationID)
	if err == nil && len(outs) == 0 {
		err = fmt.Errorf("Not found platformID==%s, migrationID==%s in %s\n", platformID, migrationID, TableName(d.ConnGen.TableNamePrefix))
	}
	if len(outs) > 0 {
		out = outs[0]
	}
	return
}


// ReadUnsafe reads the Migration. Panics in case of any errors
func (d DAOImpl) ReadUnsafe(platformID common.PlatformID, migrationID string) Migration {
	out, err2 := d.Read(platformID, migrationID)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("Error reading platformID==%s, migrationID==%s in %s\n", platformID, migrationID, TableName(d.ConnGen.TableNamePrefix)))
	return out
}


// ReadOrEmpty reads Migration
func (d DAOImpl) ReadOrEmpty(platformID common.PlatformID, migrationID string) (out []Migration, err error) {
	var outOrEmpty Migration
	ids := idParams(platformID, migrationID)
	var found bool
	found, err = d.ConnGen.Dynamo.GetItemOrEmptyFromTable(TableName(d.ConnGen.TableNamePrefix), ids, &outOrEmpty)
	if found {
		if outOrEmpty.PlatformID == platformID && outOrEmpty.MigrationID == migrationID {
			out = append(out, outOrEmpty)
		} else {
			err = fmt.Errorf("Requested ids: platformID==%s, migrationID==%s are different from the found ones: platformID==%s, migrationID==%s", platformID, migrationID, outOrEmpty.PlatformID, outOrEmpty.MigrationID) // unexpected error: found ids != ids
		}
	}
	err = errors.Wrapf(err, "Migration DAO.ReadOrEmpty(id = %v) couldn't GetItem in table %s", ids, TableName(d.ConnGen.TableNamePrefix))
	return
}


// ReadOrEmptyUnsafe reads the Migration. Panics in case of any errors
func (d DAOImpl) ReadOrEmptyUnsafe(platformID common.PlatformID, migrationID string) []Migration {
	out, err2 := d.ReadOrEmpty(platformID, migrationID)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("Error while reading platformID==%s, migrationID==%s in %s\n", platformID, migrationID, TableName(d.ConnGen.TableNamePrefix)))
	return out
}


// CreateOrUpdate saves the Migration regardless of if it exists.
func (d DAOImpl) CreateOrUpdate(migration Migration) (err error) {
	migration.ModifiedAt = core.CurrentRFCTimestamp()
	if migration.CreatedAt == "" { migration.CreatedAt = migration.ModifiedAt }
	
	var olds []Migration
	olds, err = d.ReadOrEmpty(migration.PlatformID, migration.MigrationID)
	err = errors.Wrapf(err, "Migration DAO.CreateOrUpdate(id = platformID==%s, migrationID==%s) couldn't ReadOrEmpty", migration.PlatformID, migration.MigrationID)
	if err == nil {
		if len(olds) == 0 {
			err = d.Create(migration)
			err = errors.Wrapf(err, "Migration DAO.CreateOrUpdate couldn't Create in table %s", TableName(d.ConnGen.TableNamePrefix))
		} else {
			emptyFields, ok := migration.CollectEmptyFields()
			if ok {
				old := olds[0]
				migration.CreatedAt  = old.CreatedAt
				migration.ModifiedAt = core.CurrentRFCTimestamp()
				key := idParams(old.PlatformID, old.MigrationID)
				expr, exprAttributes, names := updateExpression(migration, old)
				input := dynamodb.UpdateItemInput{
					ExpressionAttributeValues: exprAttributes,
					TableName:                 aws.String(TableName(d.ConnGen.TableNamePrefix)),
					Key:                       key,
					ReturnValues:              aws.String("UPDATED_NEW"),
					UpdateExpression:          aws.String(expr),
				}
				if names != nil { input.ExpressionAttributeNames = *names } // workaround for a pointer to an empty slice
				if  len(exprAttributes) > 0 { // if there some changes
					err = d.ConnGen.Dynamo.UpdateItemInternal(input)
				} else {
					// WARN: no changes.
				}
				err = errors.Wrapf(err, "Migration DAO.CreateOrUpdate(id = %v) couldn't UpdateTableEntry in table %s, expression='%s'", key, TableName(d.ConnGen.TableNamePrefix), expr)
			} else {
				err = fmt.Errorf("Cannot update entity with empty required fields: %v", emptyFields)
			}
		}
	}
	return 
}


// CreateOrUpdateUnsafe saves the Migration regardless of if it exists.
func (d DAOImpl) CreateOrUpdateUnsafe(migration Migration) {
	err2 := d.CreateOrUpdate(migration)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("could not create or update %v in %s\n", migration, TableName(d.ConnGen.TableNamePrefix)))
}


// Delete removes Migration from db
func (d DAOImpl)Delete(platformID common.PlatformID, migrationID string) error {
	return d.ConnGen.Dynamo.DeleteEntry(TableName(d.ConnGen.TableNamePrefix), idParams(platformID, migrationID))
}


// DeleteUnsafe deletes Migration and panics in case of errors.
func (d DAOImpl)DeleteUnsafe(platformID common.PlatformID, migrationID string) {
	err2 := d.Delete(platformID, migrationID)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("Could not delete platformID==%s, migrationID==%s in %s\n", platformID, migrationID, TableName(d.ConnGen.TableNamePrefix)))
}

func idParams(platformID common.PlatformID, migrationID string) map[string]*dynamodb.AttributeValue {
	params := map[string]*dynamodb.AttributeValue {
		"platform_id": common.DynS(string(platformID)),
		"migration_id": common.DynS(migrationID),
	}
	return params
}
func allParams(migration Migration, old Migration) (params map[string]*dynamodb.AttributeValue) {
	params = map[string]*dynamodb.AttributeValue{}
	if migration.PlatformID != old.PlatformID { params[":a0"] = common.DynS(string(migration.PlatformID)) }
	if migration.MigrationID != old.MigrationID { params[":a1"] = common.DynS(migration.MigrationID) }
	if migration.SuccessCount != old.SuccessCount { params[":a2"] = common.DynN(migration.SuccessCount) }
	if migration.FailuresCount != old.FailuresCount { params[":a3"] = common.DynN(migration.FailuresCount) }
	if migration.CreatedAt != old.CreatedAt { params[":a4"] = common.DynS(migration.CreatedAt) }
	if migration.ModifiedAt != old.ModifiedAt { params[":a5"] = common.DynS(migration.ModifiedAt) }
	return
}
func updateExpression(migration Migration, old Migration) (expr string, params map[string]*dynamodb.AttributeValue, namesPtr *map[string]*string) {
	var updateParts []string
	params = map[string]*dynamodb.AttributeValue{}
	names := map[string]*string{}
	if migration.PlatformID != old.PlatformID { updateParts = append(updateParts, "platform_id = :a0"); params[":a0"] = common.DynS(string(migration.PlatformID));  }
	if migration.MigrationID != old.MigrationID { updateParts = append(updateParts, "migration_id = :a1"); params[":a1"] = common.DynS(migration.MigrationID);  }
	if migration.SuccessCount != old.SuccessCount { updateParts = append(updateParts, "success_count = :a2"); params[":a2"] = common.DynN(migration.SuccessCount);  }
	if migration.FailuresCount != old.FailuresCount { updateParts = append(updateParts, "failures_count = :a3"); params[":a3"] = common.DynN(migration.FailuresCount);  }
	if migration.CreatedAt != old.CreatedAt { updateParts = append(updateParts, "created_at = :a4"); params[":a4"] = common.DynS(migration.CreatedAt);  }
	if migration.ModifiedAt != old.ModifiedAt { updateParts = append(updateParts, "modified_at = :a5"); params[":a5"] = common.DynS(migration.ModifiedAt);  }
	expr = "set " + strings.Join(updateParts, ", ")
	if len(names) == 0 { namesPtr = nil } else { namesPtr = &names } // workaround for ValidationException: ExpressionAttributeNames must not be empty
	return
}
