package userEngagement
// This file has been automatically generated by `adaptive-platform/scripts`
// The changes will be overridden by the next automatic generation.
import (
	ebm "github.com/adaptiveteam/engagement-builder/model"
	"github.com/adaptiveteam/adaptive-utils-go/models"
	"time"
	awsutils "github.com/adaptiveteam/aws-utils-go"
	common "github.com/adaptiveteam/adaptive/daos/common"
	core "github.com/adaptiveteam/adaptive/core-utils-go"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/pkg/errors"
	"fmt"
	"strings"
)

// UserEngagement encapsulates an engagement we want to provide to a user
type UserEngagement struct  {
	// A unique id to identify the engagement
	ID string `json:"id"`
	// PlatformID is the identifier of the platform.
	// It's used to get platform token required to send message to Slack/Teams.
	PlatformID models.PlatformID `json:"platform_id"`
	// UserId is the Id of the user to send an engagement to
	// This usually corresponds to the platform user id
	UserID string `json:"user_id"`
	// TargetId is the Id of the user for whom this is related to
	TargetID string `json:"target_id"`
	// Namespace for the engagement
	Namespace string `json:"namespace"`
	// Check identifier for the engagement
	CheckIdentifier string `json:"check_identifier,omitempty"`
	CheckValue bool `json:"check_value,omitempty"`
	// Script that should be sent to a user to start engaging.
	// It's a serialized ebm.Message
	// deprecated. Use `Message` directly.
	Script string `json:"script"`
	// Message is the message we want to send to user
	Message ebm.Message `json:"message"`
	// Priority of the engagement
	// Urgent priority engagements are immediately sent to a user
	// Other priority engagements are queued up in the order of priority to be sent to user in next window
	Priority models.PriorityValue `json:"priority"`
	// A boolean flag indicating if it's optional
	Optional bool `json:"optional"`
	// A flag indicating is a user has responded to the engagement - 1 for answered, 0 for un-answered
	// this is required because, we need to keep the engagement even after a user has answered it
	// If the user wants to edit later, we will refer to the same engagement to post to user, like getting survey information
	// So, we need a way to differentiate between answered and unanswered engagements
	Answered int `json:"answered"`
	// Flag indicating if an engagement is ignored, 1 for yes, 0 for no
	Ignored int `json:"ignored"`
	EffectiveStartDate string `json:"effective_start_date,omitempty"`
	EffectiveEndDate string `json:"effective_end_date,omitempty"`
	// Re-scheduled timestamp for the engagement, if any
	RescheduledFrom string `json:"rescheduled_from"`
	// Automatically maintained field
	CreatedAt string `json:"created_at"`
	// Automatically maintained field
	ModifiedAt string `json:"modified_at"`
}

// CollectEmptyFields returns entity field names that are empty.
// It also returns the boolean ok-flag if the list is empty.
func (userEngagement UserEngagement)CollectEmptyFields() (emptyFields []string, ok bool) {
	if userEngagement.ID == "" { emptyFields = append(emptyFields, "ID")}
	if userEngagement.PlatformID == "" { emptyFields = append(emptyFields, "PlatformID")}
	if userEngagement.UserID == "" { emptyFields = append(emptyFields, "UserID")}
	if userEngagement.TargetID == "" { emptyFields = append(emptyFields, "TargetID")}
	if userEngagement.Namespace == "" { emptyFields = append(emptyFields, "Namespace")}
	if userEngagement.Script == "" { emptyFields = append(emptyFields, "Script")}
	if userEngagement.Priority == "" { emptyFields = append(emptyFields, "Priority")}
	if userEngagement.RescheduledFrom == "" { emptyFields = append(emptyFields, "RescheduledFrom")}
	ok = len(emptyFields) == 0
	return
}

type DAO interface {
	Create(userEngagement UserEngagement) error
	CreateUnsafe(userEngagement UserEngagement)
	Read(id string) (userEngagement UserEngagement, err error)
	ReadUnsafe(id string) (userEngagement UserEngagement)
	ReadOrEmpty(id string) (userEngagement []UserEngagement, err error)
	ReadOrEmptyUnsafe(id string) (userEngagement []UserEngagement)
	CreateOrUpdate(userEngagement UserEngagement) error
	CreateOrUpdateUnsafe(userEngagement UserEngagement)
	Delete(id string) error
	DeleteUnsafe(id string)
	ReadByUserIDID(userID string, id string) (userEngagement []UserEngagement, err error)
	ReadByUserIDIDUnsafe(userID string, id string) (userEngagement []UserEngagement)
	ReadByUserIDAnswered(userID string, answered int) (userEngagement []UserEngagement, err error)
	ReadByUserIDAnsweredUnsafe(userID string, answered int) (userEngagement []UserEngagement)
}

// DAOImpl - a container for all information needed to access a DynamoDB table
type DAOImpl struct {
	Dynamo    *awsutils.DynamoRequest `json:"dynamo"`
	Namespace string                  `json:"namespace"`
	Name      string                  `json:"name"`
}

// NewDAO creates an instance of DAO that will provide access to the table
func NewDAO(dynamo *awsutils.DynamoRequest, namespace, clientID string) DAO {
	if clientID == "" { panic("Cannot create DAO without clientID") }
	return DAOImpl{Dynamo: dynamo, Namespace: namespace, 
		Name: clientID + "_user_engagement",
	}
}

// NewDAOByTableName creates an instance of DAO that will provide access to the table
func NewDAOByTableName(dynamo *awsutils.DynamoRequest, namespace, tableName string) DAO {
	if tableName == "" { panic("Cannot create DAO without tableName") }
	return DAOImpl{Dynamo: dynamo, Namespace: namespace, 
		Name: tableName,
	}
}

// Create saves the UserEngagement.
func (d DAOImpl) Create(userEngagement UserEngagement) error {
	emptyFields, ok := userEngagement.CollectEmptyFields()
	if !ok {return fmt.Errorf("Cannot create entity with empty fields: %v", emptyFields)}
	userEngagement.ModifiedAt = core.TimestampLayout.Format(time.Now())
	userEngagement.CreatedAt = userEngagement.ModifiedAt
	return d.Dynamo.PutTableEntry(userEngagement, d.Name)
}


// CreateUnsafe saves the UserEngagement.
func (d DAOImpl) CreateUnsafe(userEngagement UserEngagement) {
	err := d.Create(userEngagement)
	core.ErrorHandler(err, d.Namespace, fmt.Sprintf("Could not create id==%s in %s\n", userEngagement.ID, d.Name))
}


// Read reads UserEngagement
func (d DAOImpl) Read(id string) (out UserEngagement, err error) {
	var outs []UserEngagement
	outs, err = d.ReadOrEmpty(id)
	if err == nil && len(outs) == 0 {
		err = fmt.Errorf("Not found id==%s in %s\n", id, d.Name)
	}
	return
}


// ReadUnsafe reads the UserEngagement. Panics in case of any errors
func (d DAOImpl) ReadUnsafe(id string) UserEngagement {
	out, err := d.Read(id)
	core.ErrorHandler(err, d.Namespace, fmt.Sprintf("Error reading id==%s in %s\n", id, d.Name))
	return out
}


// ReadOrEmpty reads UserEngagement
func (d DAOImpl) ReadOrEmpty(id string) (out []UserEngagement, err error) {
	var outOrEmpty UserEngagement
	ids := idParams(id)
	err = d.Dynamo.QueryTable(d.Name, ids, &outOrEmpty)
	if outOrEmpty.ID == id {
		out = append(out, outOrEmpty)
	}
	err = errors.Wrapf(err, "UserEngagement DAO.ReadOrEmpty(id = %v) couldn't GetItem in table %s", ids, d.Name)
	return
}


// ReadOrEmptyUnsafe reads the UserEngagement. Panics in case of any errors
func (d DAOImpl) ReadOrEmptyUnsafe(id string) []UserEngagement {
	out, err := d.ReadOrEmpty(id)
	core.ErrorHandler(err, d.Namespace, fmt.Sprintf("Error while reading id==%s in %s\n", id, d.Name))
	return out
}


// CreateOrUpdate saves the UserEngagement regardless of if it exists.
func (d DAOImpl) CreateOrUpdate(userEngagement UserEngagement) (err error) {
	userEngagement.ModifiedAt = core.TimestampLayout.Format(time.Now())
	if userEngagement.CreatedAt == "" { userEngagement.CreatedAt = userEngagement.ModifiedAt }
	
	var olds []UserEngagement
	olds, err = d.ReadOrEmpty(userEngagement.ID)
	if err == nil {
		if len(olds) == 0 {
			err = d.Create(userEngagement)
			err = errors.Wrapf(err, "UserEngagement DAO.CreateOrUpdate couldn't Create in table %s", d.Name)
		} else {
			old := olds[0]
			userEngagement.ModifiedAt = core.TimestampLayout.Format(time.Now())
ids := idParams(old.ID)
			err = d.Dynamo.UpdateTableEntry(
				allParams(userEngagement, old),
				ids,
				updateExpression(userEngagement, old),
				d.Name,
			)
			err = errors.Wrapf(err, "UserEngagement DAO.CreateOrUpdate(id = %v) couldn't UpdateTableEntry in table %s", ids, d.Name)
		}
	}
	return 
}


// CreateOrUpdateUnsafe saves the UserEngagement regardless of if it exists.
func (d DAOImpl) CreateOrUpdateUnsafe(userEngagement UserEngagement) {
	err := d.CreateOrUpdate(userEngagement)
	core.ErrorHandler(err, d.Namespace, fmt.Sprintf("could not create or update %v in %s\n", userEngagement, d.Name))
}


// Delete removes UserEngagement from db
func (d DAOImpl)Delete(id string) error {
	return d.Dynamo.DeleteEntry(d.Name, idParams(id))
}


// DeleteUnsafe deletes UserEngagement and panics in case of errors.
func (d DAOImpl)DeleteUnsafe(id string) {
	err := d.Delete(id)
	core.ErrorHandler(err, d.Namespace, fmt.Sprintf("Could not delete id==%s in %s\n", id, d.Name))
}


func (d DAOImpl)ReadByUserIDID(userID string, id string) (out []UserEngagement, err error) {
	var instances []UserEngagement
	err = d.Dynamo.QueryTableWithIndex(d.Name, awsutils.DynamoIndexExpression{
		IndexName: "UserIDIDIndex",
		Condition: "user_id = :a0 and id = :a1",
		Attributes: map[string]interface{}{
			":a0": userID,
			":a1": id,
		},
	}, map[string]string{}, true, -1, &instances)
	out = instances
	return
}


func (d DAOImpl)ReadByUserIDIDUnsafe(userID string, id string) (out []UserEngagement) {
	out, err := d.ReadByUserIDID(userID, id)
	core.ErrorHandler(err, d.Namespace, fmt.Sprintf("Could not query UserIDIDIndex on %s table\n", d.Name))
	return
}


func (d DAOImpl)ReadByUserIDAnswered(userID string, answered int) (out []UserEngagement, err error) {
	var instances []UserEngagement
	err = d.Dynamo.QueryTableWithIndex(d.Name, awsutils.DynamoIndexExpression{
		IndexName: "UserIDAnsweredIndex",
		Condition: "user_id = :a0 and answered = :a1",
		Attributes: map[string]interface{}{
			":a0": userID,
			":a1": answered,
		},
	}, map[string]string{}, true, -1, &instances)
	out = instances
	return
}


func (d DAOImpl)ReadByUserIDAnsweredUnsafe(userID string, answered int) (out []UserEngagement) {
	out, err := d.ReadByUserIDAnswered(userID, answered)
	core.ErrorHandler(err, d.Namespace, fmt.Sprintf("Could not query UserIDAnsweredIndex on %s table\n", d.Name))
	return
}

func idParams(id string) map[string]*dynamodb.AttributeValue {
	params := map[string]*dynamodb.AttributeValue {
		"id": common.DynS(id),
	}
	return params
}
func allParams(userEngagement UserEngagement, old UserEngagement) (params map[string]*dynamodb.AttributeValue) {
	panic("struct fields are not supported in UserEngagement.CreateOrUpdate/allParams")
	return
}
func updateExpression(userEngagement UserEngagement, old UserEngagement) string {
	var updateParts []string
	
		
			
		if userEngagement.ID != old.ID { updateParts = append(updateParts, "id = :a0") }
		if userEngagement.PlatformID != old.PlatformID { updateParts = append(updateParts, "platform_id = :a1") }
		if userEngagement.UserID != old.UserID { updateParts = append(updateParts, "user_id = :a2") }
		if userEngagement.TargetID != old.TargetID { updateParts = append(updateParts, "target_id = :a3") }
		if userEngagement.Namespace != old.Namespace { updateParts = append(updateParts, "namespace = :a4") }
		if userEngagement.CheckIdentifier != old.CheckIdentifier { updateParts = append(updateParts, "check_identifier = :a5") }
		if userEngagement.CheckValue != old.CheckValue { updateParts = append(updateParts, "check_value = :a6") }
		if userEngagement.Script != old.Script { updateParts = append(updateParts, "script = :a7") }
		panic("struct fields are not supported in UserEngagement.CreateOrUpdate/updateExpression Message")
		if userEngagement.Priority != old.Priority { updateParts = append(updateParts, "priority = :a9") }
		if userEngagement.Optional != old.Optional { updateParts = append(updateParts, "optional = :a10") }
		if userEngagement.Answered != old.Answered { updateParts = append(updateParts, "answered = :a11") }
		if userEngagement.Ignored != old.Ignored { updateParts = append(updateParts, "ignored = :a12") }
		if userEngagement.EffectiveStartDate != old.EffectiveStartDate { updateParts = append(updateParts, "effective_start_date = :a13") }
		if userEngagement.EffectiveEndDate != old.EffectiveEndDate { updateParts = append(updateParts, "effective_end_date = :a14") }
		if userEngagement.RescheduledFrom != old.RescheduledFrom { updateParts = append(updateParts, "rescheduled_from = :a15") }
		if userEngagement.CreatedAt != old.CreatedAt { updateParts = append(updateParts, "created_at = :a16") }
		if userEngagement.ModifiedAt != old.ModifiedAt { updateParts = append(updateParts, "modified_at = :a17") }
	return strings.Join(updateParts, " and ")
}
