package strategyCommunity
// This file has been automatically generated by `adaptive/scripts`
// The changes will be overridden by the next automatic generation.
import (
	"github.com/aws/aws-sdk-go/aws"
	awsutils "github.com/adaptiveteam/adaptive/aws-utils-go"
	common "github.com/adaptiveteam/adaptive/daos/common"
	core "github.com/adaptiveteam/adaptive/core-utils-go"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/pkg/errors"
	"fmt"
	"encoding/json"
	"strings"
)

type StrategyCommunity struct  {
	ID string `json:"id"`
	PlatformID common.PlatformID `json:"platform_id"`
	Advocate string `json:"advocate,omitempty"`
	Community common.AdaptiveCommunityID `json:"community"`
	ChannelID string `json:"channel_id"`
	// 0 for false
	ChannelCreated int `json:"channel_created"`
	AccountabilityPartner string `json:"accountability_partner"`
	ParentCommunity common.AdaptiveCommunityID `json:"parent_community"`
	ParentCommunityChannelID string `json:"parent_community_channel_id"`
	// Automatically maintained field
	CreatedAt string `json:"created_at"`
	// Automatically maintained field
	ModifiedAt string `json:"modified_at,omitempty"`
}

// CollectEmptyFields returns entity field names that are empty.
// It also returns the boolean ok-flag if the list is empty.
func (strategyCommunity StrategyCommunity)CollectEmptyFields() (emptyFields []string, ok bool) {
	if strategyCommunity.ID == "" { emptyFields = append(emptyFields, "ID")}
	if strategyCommunity.PlatformID == "" { emptyFields = append(emptyFields, "PlatformID")}
	if strategyCommunity.Community == "" { emptyFields = append(emptyFields, "Community")}
	if strategyCommunity.ChannelID == "" { emptyFields = append(emptyFields, "ChannelID")}
	if strategyCommunity.AccountabilityPartner == "" { emptyFields = append(emptyFields, "AccountabilityPartner")}
	if strategyCommunity.ParentCommunity == "" { emptyFields = append(emptyFields, "ParentCommunity")}
	if strategyCommunity.ParentCommunityChannelID == "" { emptyFields = append(emptyFields, "ParentCommunityChannelID")}
	ok = len(emptyFields) == 0
	return
}
// ToJSON returns json string
func (strategyCommunity StrategyCommunity) ToJSON() (string, error) {
	b, err := json.Marshal(strategyCommunity)
	return string(b), err
}

type DAO interface {
	Create(strategyCommunity StrategyCommunity) error
	CreateUnsafe(strategyCommunity StrategyCommunity)
	Read(id string) (strategyCommunity StrategyCommunity, err error)
	ReadUnsafe(id string) (strategyCommunity StrategyCommunity)
	ReadOrEmpty(id string) (strategyCommunity []StrategyCommunity, err error)
	ReadOrEmptyUnsafe(id string) (strategyCommunity []StrategyCommunity)
	CreateOrUpdate(strategyCommunity StrategyCommunity) error
	CreateOrUpdateUnsafe(strategyCommunity StrategyCommunity)
	Delete(id string) error
	DeleteUnsafe(id string)
	ReadByPlatformIDChannelCreated(platformID common.PlatformID, channelCreated int) (strategyCommunity []StrategyCommunity, err error)
	ReadByPlatformIDChannelCreatedUnsafe(platformID common.PlatformID, channelCreated int) (strategyCommunity []StrategyCommunity)
	ReadByPlatformID(platformID common.PlatformID) (strategyCommunity []StrategyCommunity, err error)
	ReadByPlatformIDUnsafe(platformID common.PlatformID) (strategyCommunity []StrategyCommunity)
	ReadByChannelID(channelID string) (strategyCommunity []StrategyCommunity, err error)
	ReadByChannelIDUnsafe(channelID string) (strategyCommunity []StrategyCommunity)
}

// DAOImpl - a container for all information needed to access a DynamoDB table
type DAOImpl struct {
	ConnGen   common.DynamoDBConnectionGen
}

// NewDAO creates an instance of DAO that will provide access to the table
func NewDAO(dynamo *awsutils.DynamoRequest, namespace, clientID string) DAO {
	if clientID == "" { panic(errors.New("Cannot create StrategyCommunity.DAO without clientID")) }
	return DAOImpl{
		ConnGen:   common.DynamoDBConnectionGen{
			Dynamo: dynamo, 
			TableNamePrefix: clientID,
		},
	}
}
// TableNameSuffixVar is a global variable that contains table name suffix.
// After renaming all tables this may be made `const`.
var TableNameSuffixVar = "_strategy_community"

// TableName concatenates table name prefix and suffix and returns table name
func TableName(prefix string) string {
	return prefix + TableNameSuffixVar
}

// Create saves the StrategyCommunity.
func (d DAOImpl) Create(strategyCommunity StrategyCommunity) (err error) {
	emptyFields, ok := strategyCommunity.CollectEmptyFields()
	if ok {
		strategyCommunity.ModifiedAt = core.CurrentRFCTimestamp()
	strategyCommunity.CreatedAt = strategyCommunity.ModifiedAt
	err = d.ConnGen.Dynamo.PutTableEntry(strategyCommunity, TableName(d.ConnGen.TableNamePrefix))
	} else {
		err = fmt.Errorf("Cannot create entity with empty fields: %v", emptyFields)
	}
	return
}


// CreateUnsafe saves the StrategyCommunity.
func (d DAOImpl) CreateUnsafe(strategyCommunity StrategyCommunity) {
	err2 := d.Create(strategyCommunity)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("Could not create id==%s in %s\n", strategyCommunity.ID, TableName(d.ConnGen.TableNamePrefix)))
}


// Read reads StrategyCommunity
func (d DAOImpl) Read(id string) (out StrategyCommunity, err error) {
	var outs []StrategyCommunity
	outs, err = d.ReadOrEmpty(id)
	if err == nil && len(outs) == 0 {
		err = fmt.Errorf("Not found id==%s in %s\n", id, TableName(d.ConnGen.TableNamePrefix))
	}
	if len(outs) > 0 {
		out = outs[0]
	}
	return
}


// ReadUnsafe reads the StrategyCommunity. Panics in case of any errors
func (d DAOImpl) ReadUnsafe(id string) StrategyCommunity {
	out, err2 := d.Read(id)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("Error reading id==%s in %s\n", id, TableName(d.ConnGen.TableNamePrefix)))
	return out
}


// ReadOrEmpty reads StrategyCommunity
func (d DAOImpl) ReadOrEmpty(id string) (out []StrategyCommunity, err error) {
	var outOrEmpty StrategyCommunity
	ids := idParams(id)
	var found bool
	found, err = d.ConnGen.Dynamo.GetItemOrEmptyFromTable(TableName(d.ConnGen.TableNamePrefix), ids, &outOrEmpty)
	if found {
		if outOrEmpty.ID == id {
			out = append(out, outOrEmpty)
		} else {
			err = fmt.Errorf("Requested ids: id==%s are different from the found ones: id==%s", id, outOrEmpty.ID) // unexpected error: found ids != ids
		}
	}
	err = errors.Wrapf(err, "StrategyCommunity DAO.ReadOrEmpty(id = %v) couldn't GetItem in table %s", ids, TableName(d.ConnGen.TableNamePrefix))
	return
}


// ReadOrEmptyUnsafe reads the StrategyCommunity. Panics in case of any errors
func (d DAOImpl) ReadOrEmptyUnsafe(id string) []StrategyCommunity {
	out, err2 := d.ReadOrEmpty(id)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("Error while reading id==%s in %s\n", id, TableName(d.ConnGen.TableNamePrefix)))
	return out
}


// CreateOrUpdate saves the StrategyCommunity regardless of if it exists.
func (d DAOImpl) CreateOrUpdate(strategyCommunity StrategyCommunity) (err error) {
	strategyCommunity.ModifiedAt = core.CurrentRFCTimestamp()
	if strategyCommunity.CreatedAt == "" { strategyCommunity.CreatedAt = strategyCommunity.ModifiedAt }
	
	var olds []StrategyCommunity
	olds, err = d.ReadOrEmpty(strategyCommunity.ID)
	err = errors.Wrapf(err, "StrategyCommunity DAO.CreateOrUpdate(id = id==%s) couldn't ReadOrEmpty", strategyCommunity.ID)
	if err == nil {
		if len(olds) == 0 {
			err = d.Create(strategyCommunity)
			err = errors.Wrapf(err, "StrategyCommunity DAO.CreateOrUpdate couldn't Create in table %s", TableName(d.ConnGen.TableNamePrefix))
		} else {
			emptyFields, ok := strategyCommunity.CollectEmptyFields()
			if ok {
				old := olds[0]
				strategyCommunity.CreatedAt  = old.CreatedAt
				strategyCommunity.ModifiedAt = core.CurrentRFCTimestamp()
				key := idParams(old.ID)
				expr, exprAttributes, names := updateExpression(strategyCommunity, old)
				input := dynamodb.UpdateItemInput{
					ExpressionAttributeValues: exprAttributes,
					TableName:                 aws.String(TableName(d.ConnGen.TableNamePrefix)),
					Key:                       key,
					ReturnValues:              aws.String("UPDATED_NEW"),
					UpdateExpression:          aws.String(expr),
				}
				if names != nil { input.ExpressionAttributeNames = *names } // workaround for a pointer to an empty slice
				if  len(exprAttributes) > 0 { // if there some changes
					err = d.ConnGen.Dynamo.UpdateItemInternal(input)
				} else {
					// WARN: no changes.
				}
				err = errors.Wrapf(err, "StrategyCommunity DAO.CreateOrUpdate(id = %v) couldn't UpdateTableEntry in table %s, expression='%s'", key, TableName(d.ConnGen.TableNamePrefix), expr)
			} else {
				err = fmt.Errorf("Cannot update entity with empty required fields: %v", emptyFields)
			}
		}
	}
	return 
}


// CreateOrUpdateUnsafe saves the StrategyCommunity regardless of if it exists.
func (d DAOImpl) CreateOrUpdateUnsafe(strategyCommunity StrategyCommunity) {
	err2 := d.CreateOrUpdate(strategyCommunity)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("could not create or update %v in %s\n", strategyCommunity, TableName(d.ConnGen.TableNamePrefix)))
}


// Delete removes StrategyCommunity from db
func (d DAOImpl)Delete(id string) error {
	return d.ConnGen.Dynamo.DeleteEntry(TableName(d.ConnGen.TableNamePrefix), idParams(id))
}


// DeleteUnsafe deletes StrategyCommunity and panics in case of errors.
func (d DAOImpl)DeleteUnsafe(id string) {
	err2 := d.Delete(id)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("Could not delete id==%s in %s\n", id, TableName(d.ConnGen.TableNamePrefix)))
}


func (d DAOImpl)ReadByPlatformIDChannelCreated(platformID common.PlatformID, channelCreated int) (out []StrategyCommunity, err error) {
	var instances []StrategyCommunity
	err = d.ConnGen.Dynamo.QueryTableWithIndex(TableName(d.ConnGen.TableNamePrefix), awsutils.DynamoIndexExpression{
		IndexName: "PlatformIDChannelCreatedIndex",
		Condition: "platform_id = :a0 and channel_created = :a1",
		Attributes: map[string]interface{}{
			":a0": platformID,
			":a1": channelCreated,
		},
	}, map[string]string{}, true, -1, &instances)
	out = instances
	return
}


func (d DAOImpl)ReadByPlatformIDChannelCreatedUnsafe(platformID common.PlatformID, channelCreated int) (out []StrategyCommunity) {
	out, err2 := d.ReadByPlatformIDChannelCreated(platformID, channelCreated)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("Could not query PlatformIDChannelCreatedIndex on %s table\n", TableName(d.ConnGen.TableNamePrefix)))
	return
}


func (d DAOImpl)ReadByPlatformID(platformID common.PlatformID) (out []StrategyCommunity, err error) {
	var instances []StrategyCommunity
	err = d.ConnGen.Dynamo.QueryTableWithIndex(TableName(d.ConnGen.TableNamePrefix), awsutils.DynamoIndexExpression{
		IndexName: "PlatformIDIndex",
		Condition: "platform_id = :a0",
		Attributes: map[string]interface{}{
			":a0": platformID,
		},
	}, map[string]string{}, true, -1, &instances)
	out = instances
	return
}


func (d DAOImpl)ReadByPlatformIDUnsafe(platformID common.PlatformID) (out []StrategyCommunity) {
	out, err2 := d.ReadByPlatformID(platformID)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("Could not query PlatformIDIndex on %s table\n", TableName(d.ConnGen.TableNamePrefix)))
	return
}


func (d DAOImpl)ReadByChannelID(channelID string) (out []StrategyCommunity, err error) {
	var instances []StrategyCommunity
	err = d.ConnGen.Dynamo.QueryTableWithIndex(TableName(d.ConnGen.TableNamePrefix), awsutils.DynamoIndexExpression{
		IndexName: "ChannelIDIndex",
		Condition: "channel_id = :a0",
		Attributes: map[string]interface{}{
			":a0": channelID,
		},
	}, map[string]string{}, true, -1, &instances)
	out = instances
	return
}


func (d DAOImpl)ReadByChannelIDUnsafe(channelID string) (out []StrategyCommunity) {
	out, err2 := d.ReadByChannelID(channelID)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("Could not query ChannelIDIndex on %s table\n", TableName(d.ConnGen.TableNamePrefix)))
	return
}

func idParams(id string) map[string]*dynamodb.AttributeValue {
	params := map[string]*dynamodb.AttributeValue {
		"id": common.DynS(id),
	}
	return params
}
func allParams(strategyCommunity StrategyCommunity, old StrategyCommunity) (params map[string]*dynamodb.AttributeValue) {
	params = map[string]*dynamodb.AttributeValue{}
	if strategyCommunity.ID != old.ID { params[":a0"] = common.DynS(strategyCommunity.ID) }
	if strategyCommunity.PlatformID != old.PlatformID { params[":a1"] = common.DynS(string(strategyCommunity.PlatformID)) }
	if strategyCommunity.Advocate != old.Advocate { params[":a2"] = common.DynS(strategyCommunity.Advocate) }
	if strategyCommunity.Community != old.Community { params[":a3"] = common.DynS(string(strategyCommunity.Community)) }
	if strategyCommunity.ChannelID != old.ChannelID { params[":a4"] = common.DynS(strategyCommunity.ChannelID) }
	if strategyCommunity.ChannelCreated != old.ChannelCreated { params[":a5"] = common.DynN(strategyCommunity.ChannelCreated) }
	if strategyCommunity.AccountabilityPartner != old.AccountabilityPartner { params[":a6"] = common.DynS(strategyCommunity.AccountabilityPartner) }
	if strategyCommunity.ParentCommunity != old.ParentCommunity { params[":a7"] = common.DynS(string(strategyCommunity.ParentCommunity)) }
	if strategyCommunity.ParentCommunityChannelID != old.ParentCommunityChannelID { params[":a8"] = common.DynS(strategyCommunity.ParentCommunityChannelID) }
	if strategyCommunity.CreatedAt != old.CreatedAt { params[":a9"] = common.DynS(strategyCommunity.CreatedAt) }
	if strategyCommunity.ModifiedAt != old.ModifiedAt { params[":a10"] = common.DynS(strategyCommunity.ModifiedAt) }
	return
}
func updateExpression(strategyCommunity StrategyCommunity, old StrategyCommunity) (expr string, params map[string]*dynamodb.AttributeValue, namesPtr *map[string]*string) {
	var updateParts []string
	params = map[string]*dynamodb.AttributeValue{}
	names := map[string]*string{}
	if strategyCommunity.ID != old.ID { updateParts = append(updateParts, "id = :a0"); params[":a0"] = common.DynS(strategyCommunity.ID);  }
	if strategyCommunity.PlatformID != old.PlatformID { updateParts = append(updateParts, "platform_id = :a1"); params[":a1"] = common.DynS(string(strategyCommunity.PlatformID));  }
	if strategyCommunity.Advocate != old.Advocate { updateParts = append(updateParts, "advocate = :a2"); params[":a2"] = common.DynS(strategyCommunity.Advocate);  }
	if strategyCommunity.Community != old.Community { updateParts = append(updateParts, "community = :a3"); params[":a3"] = common.DynS(string(strategyCommunity.Community));  }
	if strategyCommunity.ChannelID != old.ChannelID { updateParts = append(updateParts, "channel_id = :a4"); params[":a4"] = common.DynS(strategyCommunity.ChannelID);  }
	if strategyCommunity.ChannelCreated != old.ChannelCreated { updateParts = append(updateParts, "channel_created = :a5"); params[":a5"] = common.DynN(strategyCommunity.ChannelCreated);  }
	if strategyCommunity.AccountabilityPartner != old.AccountabilityPartner { updateParts = append(updateParts, "accountability_partner = :a6"); params[":a6"] = common.DynS(strategyCommunity.AccountabilityPartner);  }
	if strategyCommunity.ParentCommunity != old.ParentCommunity { updateParts = append(updateParts, "parent_community = :a7"); params[":a7"] = common.DynS(string(strategyCommunity.ParentCommunity));  }
	if strategyCommunity.ParentCommunityChannelID != old.ParentCommunityChannelID { updateParts = append(updateParts, "parent_community_channel_id = :a8"); params[":a8"] = common.DynS(strategyCommunity.ParentCommunityChannelID);  }
	if strategyCommunity.CreatedAt != old.CreatedAt { updateParts = append(updateParts, "created_at = :a9"); params[":a9"] = common.DynS(strategyCommunity.CreatedAt);  }
	if strategyCommunity.ModifiedAt != old.ModifiedAt { updateParts = append(updateParts, "modified_at = :a10"); params[":a10"] = common.DynS(strategyCommunity.ModifiedAt);  }
	expr = "set " + strings.Join(updateParts, ", ")
	if len(names) == 0 { namesPtr = nil } else { namesPtr = &names } // workaround for ValidationException: ExpressionAttributeNames must not be empty
	return
}
