package visionMission
// This file has been automatically generated by `adaptive/scripts`
// The changes will be overridden by the next automatic generation.
import (
	"github.com/aws/aws-sdk-go/aws"
	awsutils "github.com/adaptiveteam/adaptive/aws-utils-go"
	common "github.com/adaptiveteam/adaptive/daos/common"
	core "github.com/adaptiveteam/adaptive/core-utils-go"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/pkg/errors"
	"fmt"
	"encoding/json"
	"strings"
)

type VisionMission struct  {
	ID string `json:"id"`
	PlatformID common.PlatformID `json:"platform_id"`
	Mission string `json:"mission"`
	Vision string `json:"vision"`
	Advocate string `json:"advocate"`
	CreatedBy string `json:"created_by"`
	// Automatically maintained field
	CreatedAt string `json:"created_at"`
	// Automatically maintained field
	ModifiedAt string `json:"modified_at,omitempty"`
}

// CollectEmptyFields returns entity field names that are empty.
// It also returns the boolean ok-flag if the list is empty.
func (visionMission VisionMission)CollectEmptyFields() (emptyFields []string, ok bool) {
	if visionMission.ID == "" { emptyFields = append(emptyFields, "ID")}
	if visionMission.PlatformID == "" { emptyFields = append(emptyFields, "PlatformID")}
	if visionMission.Mission == "" { emptyFields = append(emptyFields, "Mission")}
	if visionMission.Vision == "" { emptyFields = append(emptyFields, "Vision")}
	if visionMission.Advocate == "" { emptyFields = append(emptyFields, "Advocate")}
	if visionMission.CreatedBy == "" { emptyFields = append(emptyFields, "CreatedBy")}
	ok = len(emptyFields) == 0
	return
}
// ToJSON returns json string
func (visionMission VisionMission) ToJSON() (string, error) {
	b, err := json.Marshal(visionMission)
	return string(b), err
}

type DAO interface {
	Create(visionMission VisionMission) error
	CreateUnsafe(visionMission VisionMission)
	Read(id string) (visionMission VisionMission, err error)
	ReadUnsafe(id string) (visionMission VisionMission)
	ReadOrEmpty(id string) (visionMission []VisionMission, err error)
	ReadOrEmptyUnsafe(id string) (visionMission []VisionMission)
	CreateOrUpdate(visionMission VisionMission) error
	CreateOrUpdateUnsafe(visionMission VisionMission)
	Delete(id string) error
	DeleteUnsafe(id string)
}

// DAOImpl - a container for all information needed to access a DynamoDB table
type DAOImpl struct {
	Dynamo    *awsutils.DynamoRequest `json:"dynamo"`
	Namespace string                  `json:"namespace"`
	Name      string                  `json:"name"`
}

// NewDAO creates an instance of DAO that will provide access to the table
func NewDAO(dynamo *awsutils.DynamoRequest, namespace, clientID string) DAO {
	if clientID == "" { panic("Cannot create DAO without clientID") }
	return DAOImpl{Dynamo: dynamo, Namespace: namespace, 
		Name: TableName(clientID),
	}
}

// NewDAOByTableName creates an instance of DAO that will provide access to the table
func NewDAOByTableName(dynamo *awsutils.DynamoRequest, namespace, tableName string) DAO {
	if tableName == "" { panic("Cannot create DAO without tableName") }
	return DAOImpl{Dynamo: dynamo, Namespace: namespace, 
		Name: tableName,
	}
}
func TableName(clientID string) string {
	return clientID + "_vision_mission"
}

// Create saves the VisionMission.
func (d DAOImpl) Create(visionMission VisionMission) (err error) {
	emptyFields, ok := visionMission.CollectEmptyFields()
	if ok {
		visionMission.ModifiedAt = core.CurrentRFCTimestamp()
	visionMission.CreatedAt = visionMission.ModifiedAt
	err = d.Dynamo.PutTableEntry(visionMission, d.Name)
	} else {
		err = fmt.Errorf("Cannot create entity with empty fields: %v", emptyFields)
	}
	return
}


// CreateUnsafe saves the VisionMission.
func (d DAOImpl) CreateUnsafe(visionMission VisionMission) {
	err2 := d.Create(visionMission)
	core.ErrorHandler(err2, d.Namespace, fmt.Sprintf("Could not create id==%s in %s\n", visionMission.ID, d.Name))
}


// Read reads VisionMission
func (d DAOImpl) Read(id string) (out VisionMission, err error) {
	var outs []VisionMission
	outs, err = d.ReadOrEmpty(id)
	if err == nil && len(outs) == 0 {
		err = fmt.Errorf("Not found id==%s in %s\n", id, d.Name)
	}
	if len(outs) > 0 {
		out = outs[0]
	}
	return
}


// ReadUnsafe reads the VisionMission. Panics in case of any errors
func (d DAOImpl) ReadUnsafe(id string) VisionMission {
	out, err2 := d.Read(id)
	core.ErrorHandler(err2, d.Namespace, fmt.Sprintf("Error reading id==%s in %s\n", id, d.Name))
	return out
}


// ReadOrEmpty reads VisionMission
func (d DAOImpl) ReadOrEmpty(id string) (out []VisionMission, err error) {
	var outOrEmpty VisionMission
	ids := idParams(id)
	var found bool
	found, err = d.Dynamo.GetItemOrEmptyFromTable(d.Name, ids, &outOrEmpty)
	if found {
		if outOrEmpty.ID == id {
			out = append(out, outOrEmpty)
		} else {
			err = fmt.Errorf("Requested ids: id==%s are different from the found ones: id==%s", id, outOrEmpty.ID) // unexpected error: found ids != ids
		}
	}
	err = errors.Wrapf(err, "VisionMission DAO.ReadOrEmpty(id = %v) couldn't GetItem in table %s", ids, d.Name)
	return
}


// ReadOrEmptyUnsafe reads the VisionMission. Panics in case of any errors
func (d DAOImpl) ReadOrEmptyUnsafe(id string) []VisionMission {
	out, err2 := d.ReadOrEmpty(id)
	core.ErrorHandler(err2, d.Namespace, fmt.Sprintf("Error while reading id==%s in %s\n", id, d.Name))
	return out
}


// CreateOrUpdate saves the VisionMission regardless of if it exists.
func (d DAOImpl) CreateOrUpdate(visionMission VisionMission) (err error) {
	visionMission.ModifiedAt = core.CurrentRFCTimestamp()
	if visionMission.CreatedAt == "" { visionMission.CreatedAt = visionMission.ModifiedAt }
	
	var olds []VisionMission
	olds, err = d.ReadOrEmpty(visionMission.ID)
	err = errors.Wrapf(err, "VisionMission DAO.CreateOrUpdate(id = id==%s) couldn't ReadOrEmpty", visionMission.ID)
	if err == nil {
		if len(olds) == 0 {
			err = d.Create(visionMission)
			err = errors.Wrapf(err, "VisionMission DAO.CreateOrUpdate couldn't Create in table %s", d.Name)
		} else {
			emptyFields, ok := visionMission.CollectEmptyFields()
			if ok {
				old := olds[0]
				visionMission.ModifiedAt = core.CurrentRFCTimestamp()

				key := idParams(old.ID)
				expr, exprAttributes, names := updateExpression(visionMission, old)
				input := dynamodb.UpdateItemInput{
					ExpressionAttributeValues: exprAttributes,
					TableName:                 aws.String(d.Name),
					Key:                       key,
					ReturnValues:              aws.String("UPDATED_NEW"),
					UpdateExpression:          aws.String(expr),
				}
				if names != nil { input.ExpressionAttributeNames = *names } // workaround for a pointer to an empty slice
				if err == nil {
					err = d.Dynamo.UpdateItemInternal(input)
				}
				err = errors.Wrapf(err, "VisionMission DAO.CreateOrUpdate(id = %v) couldn't UpdateTableEntry in table %s, expression='%s'", key, d.Name, expr)
			} else {
				err = fmt.Errorf("Cannot update entity with empty required fields: %v", emptyFields)
			}
		}
	}
	return 
}


// CreateOrUpdateUnsafe saves the VisionMission regardless of if it exists.
func (d DAOImpl) CreateOrUpdateUnsafe(visionMission VisionMission) {
	err2 := d.CreateOrUpdate(visionMission)
	core.ErrorHandler(err2, d.Namespace, fmt.Sprintf("could not create or update %v in %s\n", visionMission, d.Name))
}


// Delete removes VisionMission from db
func (d DAOImpl)Delete(id string) error {
	return d.Dynamo.DeleteEntry(d.Name, idParams(id))
}


// DeleteUnsafe deletes VisionMission and panics in case of errors.
func (d DAOImpl)DeleteUnsafe(id string) {
	err2 := d.Delete(id)
	core.ErrorHandler(err2, d.Namespace, fmt.Sprintf("Could not delete id==%s in %s\n", id, d.Name))
}

func idParams(id string) map[string]*dynamodb.AttributeValue {
	params := map[string]*dynamodb.AttributeValue {
		"id": common.DynS(id),
	}
	return params
}
func allParams(visionMission VisionMission, old VisionMission) (params map[string]*dynamodb.AttributeValue) {
	params = map[string]*dynamodb.AttributeValue{}
	if visionMission.ID != old.ID { params[":a0"] = common.DynS(visionMission.ID) }
	if visionMission.PlatformID != old.PlatformID { params[":a1"] = common.DynS(string(visionMission.PlatformID)) }
	if visionMission.Mission != old.Mission { params[":a2"] = common.DynS(visionMission.Mission) }
	if visionMission.Vision != old.Vision { params[":a3"] = common.DynS(visionMission.Vision) }
	if visionMission.Advocate != old.Advocate { params[":a4"] = common.DynS(visionMission.Advocate) }
	if visionMission.CreatedBy != old.CreatedBy { params[":a5"] = common.DynS(visionMission.CreatedBy) }
	if visionMission.CreatedAt != old.CreatedAt { params[":a6"] = common.DynS(visionMission.CreatedAt) }
	if visionMission.ModifiedAt != old.ModifiedAt { params[":a7"] = common.DynS(visionMission.ModifiedAt) }
	return
}
func updateExpression(visionMission VisionMission, old VisionMission) (expr string, params map[string]*dynamodb.AttributeValue, namesPtr *map[string]*string) {
	var updateParts []string
	params = map[string]*dynamodb.AttributeValue{}
	names := map[string]*string{}
	if visionMission.ID != old.ID { updateParts = append(updateParts, "id = :a0"); params[":a0"] = common.DynS(visionMission.ID);  }
	if visionMission.PlatformID != old.PlatformID { updateParts = append(updateParts, "platform_id = :a1"); params[":a1"] = common.DynS(string(visionMission.PlatformID));  }
	if visionMission.Mission != old.Mission { updateParts = append(updateParts, "mission = :a2"); params[":a2"] = common.DynS(visionMission.Mission);  }
	if visionMission.Vision != old.Vision { updateParts = append(updateParts, "vision = :a3"); params[":a3"] = common.DynS(visionMission.Vision);  }
	if visionMission.Advocate != old.Advocate { updateParts = append(updateParts, "advocate = :a4"); params[":a4"] = common.DynS(visionMission.Advocate);  }
	if visionMission.CreatedBy != old.CreatedBy { updateParts = append(updateParts, "created_by = :a5"); params[":a5"] = common.DynS(visionMission.CreatedBy);  }
	if visionMission.CreatedAt != old.CreatedAt { updateParts = append(updateParts, "created_at = :a6"); params[":a6"] = common.DynS(visionMission.CreatedAt);  }
	if visionMission.ModifiedAt != old.ModifiedAt { updateParts = append(updateParts, "modified_at = :a7"); params[":a7"] = common.DynS(visionMission.ModifiedAt);  }
	expr = "set " + strings.Join(updateParts, ", ")
	if len(names) == 0 { namesPtr = nil } else { namesPtr = &names } // workaround for ValidationException: ExpressionAttributeNames must not be empty
	return
}
