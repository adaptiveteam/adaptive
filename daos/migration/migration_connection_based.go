package migration
// This file has been automatically generated by `adaptive/scripts`
// The changes will be overridden by the next automatic generation.
import (
	"github.com/aws/aws-sdk-go/aws"
	common "github.com/adaptiveteam/adaptive/daos/common"
	core "github.com/adaptiveteam/adaptive/core-utils-go"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/pkg/errors"
	"fmt"
)


// Create saves the Migration.
func Create(migration Migration) common.ConnectionProc {
	return func (conn common.DynamoDBConnection) (err error) {
		emptyFields, ok := migration.CollectEmptyFields()
		if ok {
			migration.ModifiedAt = core.CurrentRFCTimestamp()
	migration.CreatedAt = migration.ModifiedAt
	
			err = conn.Dynamo.PutTableEntry(migration, TableName(conn.ClientID))
		} else {
			err = fmt.Errorf("Cannot create entity with empty fields: %v", emptyFields)
		}
		return
	}
}


// CreateUnsafe saves the Migration.
func CreateUnsafe(migration Migration) func (conn common.DynamoDBConnection) {
	return func (conn common.DynamoDBConnection) {
		err2 := Create(migration)(conn)
		core.ErrorHandler(err2, "daos/Migration", fmt.Sprintf("Could not create platformID==%s, migrationID==%s in %s\n", migration.PlatformID, migration.MigrationID, TableName(conn.ClientID)))
	}
}


// Read reads Migration
func Read(platformID common.PlatformID, migrationID string) func (conn common.DynamoDBConnection) (out Migration, err error) {
	return func (conn common.DynamoDBConnection) (out Migration, err error) {
		var outs []Migration
		outs, err = ReadOrEmpty(platformID, migrationID)(conn)
		if err == nil && len(outs) == 0 {
			err = fmt.Errorf("Not found platformID==%s, migrationID==%s in %s\n", platformID, migrationID, TableName(conn.ClientID))
		}
		if len(outs) > 0 {
			out = outs[0]
		}
		return
	}
}


// ReadUnsafe reads the Migration. Panics in case of any errors
func ReadUnsafe(platformID common.PlatformID, migrationID string) func (conn common.DynamoDBConnection) Migration {
	return func (conn common.DynamoDBConnection) Migration {
		out, err2 := Read(platformID, migrationID)(conn)
		core.ErrorHandler(err2, "daos/Migration", fmt.Sprintf("Error reading platformID==%s, migrationID==%s in %s\n", platformID, migrationID, TableName(conn.ClientID)))
		return out
	}
}


// ReadOrEmpty reads Migration
func ReadOrEmpty(platformID common.PlatformID, migrationID string) func (conn common.DynamoDBConnection) (out []Migration, err error) {
	return func (conn common.DynamoDBConnection) (out []Migration, err error) {
       out, err = ReadOrEmptyIncludingInactive(platformID, migrationID)(conn)
       
       
		return
	}
}


// ReadOrEmptyUnsafe reads the Migration. Panics in case of any errors
func ReadOrEmptyUnsafe(platformID common.PlatformID, migrationID string) func (conn common.DynamoDBConnection) []Migration {
	return func (conn common.DynamoDBConnection) []Migration {
		out, err2 := ReadOrEmpty(platformID, migrationID)(conn)
		core.ErrorHandler(err2, "daos/Migration", fmt.Sprintf("Error while reading platformID==%s, migrationID==%s in %s\n", platformID, migrationID, TableName(conn.ClientID)))
		return out
	}
}


// ReadOrEmptyIncludingInactive reads Migration
func ReadOrEmptyIncludingInactive(platformID common.PlatformID, migrationID string) func (conn common.DynamoDBConnection) (out []Migration, err error) {
	return func (conn common.DynamoDBConnection) (out []Migration, err error) {
		var outOrEmpty Migration
		ids := idParams(platformID, migrationID)
		var found bool
		found, err = conn.Dynamo.GetItemOrEmptyFromTable(TableName(conn.ClientID), ids, &outOrEmpty)
		if found {
			if outOrEmpty.PlatformID == platformID && outOrEmpty.MigrationID == migrationID {
				out = append(out, outOrEmpty)
			} else {
				err = fmt.Errorf("Requested ids: platformID==%s, migrationID==%s are different from the found ones: platformID==%s, migrationID==%s", platformID, migrationID, outOrEmpty.PlatformID, outOrEmpty.MigrationID) // unexpected error: found ids != ids
			}
		}
		err = errors.Wrapf(err, "Migration DAO.ReadOrEmpty(id = %v) couldn't GetItem in table %s", ids, TableName(conn.ClientID))
		return
	}
}


// ReadOrEmptyIncludingInactiveUnsafe reads the Migration. Panics in case of any errors
func ReadOrEmptyIncludingInactiveUnsafeIncludingInactive(platformID common.PlatformID, migrationID string) func (conn common.DynamoDBConnection) []Migration {
	return func (conn common.DynamoDBConnection) []Migration {
		out, err2 := ReadOrEmptyIncludingInactive(platformID, migrationID)(conn)
		core.ErrorHandler(err2, "daos/Migration", fmt.Sprintf("Error while reading platformID==%s, migrationID==%s in %s\n", platformID, migrationID, TableName(conn.ClientID)))
		return out
	}
}


// CreateOrUpdate saves the Migration regardless of if it exists.
func CreateOrUpdate(migration Migration) common.ConnectionProc {
	return func (conn common.DynamoDBConnection) (err error) {
		migration.ModifiedAt = core.CurrentRFCTimestamp()
	if migration.CreatedAt == "" { migration.CreatedAt = migration.ModifiedAt }
	
		var olds []Migration
		olds, err = ReadOrEmpty(migration.PlatformID, migration.MigrationID)(conn)
		err = errors.Wrapf(err, "Migration DAO.CreateOrUpdate(id = platformID==%s, migrationID==%s) couldn't ReadOrEmpty", migration.PlatformID, migration.MigrationID)
		if err == nil {
			if len(olds) == 0 {
				err = Create(migration)(conn)
				err = errors.Wrapf(err, "Migration DAO.CreateOrUpdate couldn't Create in table %s", TableName(conn.ClientID))
			} else {
				emptyFields, ok := migration.CollectEmptyFields()
				if ok {
					old := olds[0]
					migration.CreatedAt  = old.CreatedAt
					migration.ModifiedAt = core.CurrentRFCTimestamp()
					key := idParams(old.PlatformID, old.MigrationID)
					expr, exprAttributes, names := updateExpression(migration, old)
					input := dynamodb.UpdateItemInput{
						ExpressionAttributeValues: exprAttributes,
						TableName:                 aws.String(TableName(conn.ClientID)),
						Key:                       key,
						ReturnValues:              aws.String("UPDATED_NEW"),
						UpdateExpression:          aws.String(expr),
					}
					if names != nil { input.ExpressionAttributeNames = *names } // workaround for a pointer to an empty slice
					if  len(exprAttributes) > 0 { // if there some changes
						err = conn.Dynamo.UpdateItemInternal(input)
					} else {
						// WARN: no changes.
					}
					err = errors.Wrapf(err, "Migration DAO.CreateOrUpdate(id = %v) couldn't UpdateTableEntry in table %s, expression='%s'", key, TableName(conn.ClientID), expr)
				} else {
					err = fmt.Errorf("Cannot update entity with empty required fields: %v", emptyFields)
				}
			}
		}
		return 
	}
}


// CreateOrUpdateUnsafe saves the Migration regardless of if it exists.
func CreateOrUpdateUnsafe(migration Migration) func (conn common.DynamoDBConnection) {
	return func (conn common.DynamoDBConnection) {
		err2 := CreateOrUpdate(migration)(conn)
		core.ErrorHandler(err2, "daos/Migration", fmt.Sprintf("could not create or update %v in %s\n", migration, TableName(conn.ClientID)))
	}
}


// Delete removes Migration from db
func Delete(platformID common.PlatformID, migrationID string) func (conn common.DynamoDBConnection) error {
	return func (conn common.DynamoDBConnection) error {
		return conn.Dynamo.DeleteEntry(TableName(conn.ClientID), idParams(platformID, migrationID))
	}
}


// DeleteUnsafe deletes Migration and panics in case of errors.
func DeleteUnsafe(platformID common.PlatformID, migrationID string) func (conn common.DynamoDBConnection) {
	return func (conn common.DynamoDBConnection) {
		err2 := Delete(platformID, migrationID)(conn)
		core.ErrorHandler(err2, "daos/Migration", fmt.Sprintf("Could not delete platformID==%s, migrationID==%s in %s\n", platformID, migrationID, TableName(conn.ClientID)))
	}
}

