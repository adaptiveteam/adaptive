package contextAliasEntry
// This file has been automatically generated by `adaptive/scripts`
// The changes will be overridden by the next automatic generation.
import (
	"github.com/aws/aws-sdk-go/aws"
	common "github.com/adaptiveteam/adaptive/daos/common"
	core "github.com/adaptiveteam/adaptive/core-utils-go"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/pkg/errors"
	"fmt"
)


// Create saves the ContextAliasEntry.
func Create(contextAliasEntry ContextAliasEntry) common.ConnectionProc {
	return func (conn common.DynamoDBConnection) (err error) {
		emptyFields, ok := contextAliasEntry.CollectEmptyFields()
		if ok {
			
			err = conn.Dynamo.PutTableEntry(contextAliasEntry, TableName(conn.ClientID))
		} else {
			err = fmt.Errorf("Cannot create entity with empty fields: %v", emptyFields)
		}
		return
	}
}


// CreateUnsafe saves the ContextAliasEntry.
func CreateUnsafe(contextAliasEntry ContextAliasEntry) func (conn common.DynamoDBConnection) {
	return func (conn common.DynamoDBConnection) {
		err2 := Create(contextAliasEntry)(conn)
		core.ErrorHandler(err2, "daos/ContextAliasEntry", fmt.Sprintf("Could not create applicationAlias==%s in %s\n", contextAliasEntry.ApplicationAlias, TableName(conn.ClientID)))
	}
}


// Read reads ContextAliasEntry
func Read(applicationAlias string) func (conn common.DynamoDBConnection) (out ContextAliasEntry, err error) {
	return func (conn common.DynamoDBConnection) (out ContextAliasEntry, err error) {
		var outs []ContextAliasEntry
		outs, err = ReadOrEmpty(applicationAlias)(conn)
		if err == nil && len(outs) == 0 {
			err = fmt.Errorf("Not found applicationAlias==%s in %s\n", applicationAlias, TableName(conn.ClientID))
		}
		if len(outs) > 0 {
			out = outs[0]
		}
		return
	}
}


// ReadUnsafe reads the ContextAliasEntry. Panics in case of any errors
func ReadUnsafe(applicationAlias string) func (conn common.DynamoDBConnection) ContextAliasEntry {
	return func (conn common.DynamoDBConnection) ContextAliasEntry {
		out, err2 := Read(applicationAlias)(conn)
		core.ErrorHandler(err2, "daos/ContextAliasEntry", fmt.Sprintf("Error reading applicationAlias==%s in %s\n", applicationAlias, TableName(conn.ClientID)))
		return out
	}
}


// ReadOrEmpty reads ContextAliasEntry
func ReadOrEmpty(applicationAlias string) func (conn common.DynamoDBConnection) (out []ContextAliasEntry, err error) {
	return func (conn common.DynamoDBConnection) (out []ContextAliasEntry, err error) {
       out, err = ReadOrEmptyIncludingInactive(applicationAlias)(conn)
       
       
		return
	}
}


// ReadOrEmptyUnsafe reads the ContextAliasEntry. Panics in case of any errors
func ReadOrEmptyUnsafe(applicationAlias string) func (conn common.DynamoDBConnection) []ContextAliasEntry {
	return func (conn common.DynamoDBConnection) []ContextAliasEntry {
		out, err2 := ReadOrEmpty(applicationAlias)(conn)
		core.ErrorHandler(err2, "daos/ContextAliasEntry", fmt.Sprintf("Error while reading applicationAlias==%s in %s\n", applicationAlias, TableName(conn.ClientID)))
		return out
	}
}


// ReadOrEmptyIncludingInactive reads ContextAliasEntry
func ReadOrEmptyIncludingInactive(applicationAlias string) func (conn common.DynamoDBConnection) (out []ContextAliasEntry, err error) {
	return func (conn common.DynamoDBConnection) (out []ContextAliasEntry, err error) {
		var outOrEmpty ContextAliasEntry
		ids := idParams(applicationAlias)
		var found bool
		found, err = conn.Dynamo.GetItemOrEmptyFromTable(TableName(conn.ClientID), ids, &outOrEmpty)
		if found {
			if outOrEmpty.ApplicationAlias == applicationAlias {
				out = append(out, outOrEmpty)
			} else {
				err = fmt.Errorf("Requested ids: applicationAlias==%s are different from the found ones: applicationAlias==%s", applicationAlias, outOrEmpty.ApplicationAlias) // unexpected error: found ids != ids
			}
		}
		err = errors.Wrapf(err, "ContextAliasEntry DAO.ReadOrEmpty(id = %v) couldn't GetItem in table %s", ids, TableName(conn.ClientID))
		return
	}
}


// ReadOrEmptyIncludingInactiveUnsafe reads the ContextAliasEntry. Panics in case of any errors
func ReadOrEmptyIncludingInactiveUnsafeIncludingInactive(applicationAlias string) func (conn common.DynamoDBConnection) []ContextAliasEntry {
	return func (conn common.DynamoDBConnection) []ContextAliasEntry {
		out, err2 := ReadOrEmptyIncludingInactive(applicationAlias)(conn)
		core.ErrorHandler(err2, "daos/ContextAliasEntry", fmt.Sprintf("Error while reading applicationAlias==%s in %s\n", applicationAlias, TableName(conn.ClientID)))
		return out
	}
}


// CreateOrUpdate saves the ContextAliasEntry regardless of if it exists.
func CreateOrUpdate(contextAliasEntry ContextAliasEntry) common.ConnectionProc {
	return func (conn common.DynamoDBConnection) (err error) {
		
		var olds []ContextAliasEntry
		olds, err = ReadOrEmpty(contextAliasEntry.ApplicationAlias)(conn)
		err = errors.Wrapf(err, "ContextAliasEntry DAO.CreateOrUpdate(id = applicationAlias==%s) couldn't ReadOrEmpty", contextAliasEntry.ApplicationAlias)
		if err == nil {
			if len(olds) == 0 {
				err = Create(contextAliasEntry)(conn)
				err = errors.Wrapf(err, "ContextAliasEntry DAO.CreateOrUpdate couldn't Create in table %s", TableName(conn.ClientID))
			} else {
				emptyFields, ok := contextAliasEntry.CollectEmptyFields()
				if ok {
					old := olds[0]
					
					
					key := idParams(old.ApplicationAlias)
					expr, exprAttributes, names := updateExpression(contextAliasEntry, old)
					input := dynamodb.UpdateItemInput{
						ExpressionAttributeValues: exprAttributes,
						TableName:                 aws.String(TableName(conn.ClientID)),
						Key:                       key,
						ReturnValues:              aws.String("UPDATED_NEW"),
						UpdateExpression:          aws.String(expr),
					}
					if names != nil { input.ExpressionAttributeNames = *names } // workaround for a pointer to an empty slice
					if  len(exprAttributes) > 0 { // if there some changes
						err = conn.Dynamo.UpdateItemInternal(input)
					} else {
						// WARN: no changes.
					}
					err = errors.Wrapf(err, "ContextAliasEntry DAO.CreateOrUpdate(id = %v) couldn't UpdateTableEntry in table %s, expression='%s'", key, TableName(conn.ClientID), expr)
				} else {
					err = fmt.Errorf("Cannot update entity with empty required fields: %v", emptyFields)
				}
			}
		}
		return 
	}
}


// CreateOrUpdateUnsafe saves the ContextAliasEntry regardless of if it exists.
func CreateOrUpdateUnsafe(contextAliasEntry ContextAliasEntry) func (conn common.DynamoDBConnection) {
	return func (conn common.DynamoDBConnection) {
		err2 := CreateOrUpdate(contextAliasEntry)(conn)
		core.ErrorHandler(err2, "daos/ContextAliasEntry", fmt.Sprintf("could not create or update %v in %s\n", contextAliasEntry, TableName(conn.ClientID)))
	}
}


// Delete removes ContextAliasEntry from db
func Delete(applicationAlias string) func (conn common.DynamoDBConnection) error {
	return func (conn common.DynamoDBConnection) error {
		return conn.Dynamo.DeleteEntry(TableName(conn.ClientID), idParams(applicationAlias))
	}
}


// DeleteUnsafe deletes ContextAliasEntry and panics in case of errors.
func DeleteUnsafe(applicationAlias string) func (conn common.DynamoDBConnection) {
	return func (conn common.DynamoDBConnection) {
		err2 := Delete(applicationAlias)(conn)
		core.ErrorHandler(err2, "daos/ContextAliasEntry", fmt.Sprintf("Could not delete applicationAlias==%s in %s\n", applicationAlias, TableName(conn.ClientID)))
	}
}

