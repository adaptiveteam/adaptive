import $file.Meta
import Meta._

import $file.Schema
import Schema._

import $file.Templates
import Templates._

import $file.TfTemplates
import TfTemplates._

import $file.GoTemplates
import GoTemplates._

import $file.DaoTemplates
import DaoTemplates._

def definitionTemplate(definition: GoDefinition): List[String] = definition match {
  case Struct(e) => structTemplate(e)
  case TypeAlias(name, tpe) => List(s"type ${goPublicName(name)} ${goType(tpe)}")
  case d:Dao => daoTemplate(d)
  case StringBasedEnum(name, items) => 
    val typeName = goPublicName(name)
    s"type $typeName string" ::
    s"const (" ::
     items.map{ case StringBasedEnumItem(itemName, value) => 
        s"\t${goPublicName(itemName)} $typeName = " + "\"" + value + "\""
    } ::: List(")")
    
}

def moduleTemplate(packageName: Name, module: Module): List[String] = {
    val header = "package " + goPrivateName(packageName)
    val i = importsTemplate(module.imports)
    header :: 
    "// This file has been automatically generated by `adaptive/scripts`" :: 
    "// The changes will be overridden by the next automatic generation." :: 
    i ::: (
        for{
            definition <- module.definitions
            line <- "" :: definitionTemplate(definition)
        } yield line
    )
}

def filenameTemplate(filename: Filename): String = 
    snakeCaseName(filename.name) + filename.suffix

def goProjectFolderProjectTemplate(projectFolder: GoProjectFolder): ProjectContent = {
    val makefileContent = makefileGoTestTemplate(projectFolder.packages)
    val makefile = FileWithContent(SourceFile(projectFolder.path + "/Makefile"), makefileContent)
    val gofiles = for{ 
        pack <- projectFolder.packages
        module <- pack.modules
        content = moduleTemplate(pack.name, module)
    } yield FileWithContent(
        SourceFile(projectFolder.path + "/" + goPrivateName(pack.name) + "/" + filenameTemplate(module.filename)),
        concatLines(content)
    )
    makefile :: gofiles
}

def terraformProjectFolderProjectTemplate(projectFolder: TerraformProjectFolder): ProjectContent = {
    for{ 
        table <- projectFolder.tables
        content = terraformTemplate(table)
    } yield FileWithContent(
        SourceFile(projectFolder.path + "/dynamo_" + tfName(table.entity.name) + ".tf"), 
        concatLines(content)
    )
}

def projectFolderProjectTemplate(projectFolder: ProjectFolder): ProjectContent = projectFolder match {
    case g:GoProjectFolder => goProjectFolderProjectTemplate(g)
    case t:TerraformProjectFolder => terraformProjectFolderProjectTemplate(t)
}

def rebase(rootDir: String): FileWithContent => FileWithContent = {
    case FileWithContent(SourceFile(path), content) => 
        FileWithContent(SourceFile(rootDir + "/" + path), content)
}

def renderProjects(projects: List[ProjectFolder]): ProjectContent = {
    projects.flatMap(projectFolderProjectTemplate)
}
