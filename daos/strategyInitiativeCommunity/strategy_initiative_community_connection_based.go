package strategyInitiativeCommunity
// This file has been automatically generated by `adaptive/scripts`
// The changes will be overridden by the next automatic generation.
import (
	"github.com/aws/aws-sdk-go/aws"
	awsutils "github.com/adaptiveteam/adaptive/aws-utils-go"
	common "github.com/adaptiveteam/adaptive/daos/common"
	core "github.com/adaptiveteam/adaptive/core-utils-go"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/pkg/errors"
	"fmt"
)


// Create saves the StrategyInitiativeCommunity.
func Create(strategyInitiativeCommunity StrategyInitiativeCommunity) common.ConnectionProc {
	return func (conn common.DynamoDBConnection) (err error) {
		emptyFields, ok := strategyInitiativeCommunity.CollectEmptyFields()
		if ok {
			strategyInitiativeCommunity.ModifiedAt = core.CurrentRFCTimestamp()
	strategyInitiativeCommunity.CreatedAt = strategyInitiativeCommunity.ModifiedAt
	
			err = conn.Dynamo.PutTableEntry(strategyInitiativeCommunity, TableName(conn.ClientID))
		} else {
			err = fmt.Errorf("Cannot create entity with empty fields: %v", emptyFields)
		}
		return
	}
}


// CreateUnsafe saves the StrategyInitiativeCommunity.
func CreateUnsafe(strategyInitiativeCommunity StrategyInitiativeCommunity) func (conn common.DynamoDBConnection) {
	return func (conn common.DynamoDBConnection) {
		err2 := Create(strategyInitiativeCommunity)(conn)
		core.ErrorHandler(err2, "daos/StrategyInitiativeCommunity", fmt.Sprintf("Could not create id==%s, platformID==%s in %s\n", strategyInitiativeCommunity.ID, strategyInitiativeCommunity.PlatformID, TableName(conn.ClientID)))
	}
}


// Read reads StrategyInitiativeCommunity
func Read(id string, platformID common.PlatformID) func (conn common.DynamoDBConnection) (out StrategyInitiativeCommunity, err error) {
	return func (conn common.DynamoDBConnection) (out StrategyInitiativeCommunity, err error) {
		var outs []StrategyInitiativeCommunity
		outs, err = ReadOrEmpty(id, platformID)(conn)
		if err == nil && len(outs) == 0 {
			err = fmt.Errorf("Not found id==%s, platformID==%s in %s\n", id, platformID, TableName(conn.ClientID))
		}
		if len(outs) > 0 {
			out = outs[0]
		}
		return
	}
}


// ReadUnsafe reads the StrategyInitiativeCommunity. Panics in case of any errors
func ReadUnsafe(id string, platformID common.PlatformID) func (conn common.DynamoDBConnection) StrategyInitiativeCommunity {
	return func (conn common.DynamoDBConnection) StrategyInitiativeCommunity {
		out, err2 := Read(id, platformID)(conn)
		core.ErrorHandler(err2, "daos/StrategyInitiativeCommunity", fmt.Sprintf("Error reading id==%s, platformID==%s in %s\n", id, platformID, TableName(conn.ClientID)))
		return out
	}
}


// ReadOrEmpty reads StrategyInitiativeCommunity
func ReadOrEmpty(id string, platformID common.PlatformID) func (conn common.DynamoDBConnection) (out []StrategyInitiativeCommunity, err error) {
	return func (conn common.DynamoDBConnection) (out []StrategyInitiativeCommunity, err error) {
		var outOrEmpty StrategyInitiativeCommunity
		ids := idParams(id, platformID)
		var found bool
		found, err = conn.Dynamo.GetItemOrEmptyFromTable(TableName(conn.ClientID), ids, &outOrEmpty)
		if found {
			if outOrEmpty.ID == id && outOrEmpty.PlatformID == platformID {
				out = append(out, outOrEmpty)
			} else {
				err = fmt.Errorf("Requested ids: id==%s, platformID==%s are different from the found ones: id==%s, platformID==%s", id, platformID, outOrEmpty.ID, outOrEmpty.PlatformID) // unexpected error: found ids != ids
			}
		}
		err = errors.Wrapf(err, "StrategyInitiativeCommunity DAO.ReadOrEmpty(id = %v) couldn't GetItem in table %s", ids, TableName(conn.ClientID))
		return
	}
}


// ReadOrEmptyUnsafe reads the StrategyInitiativeCommunity. Panics in case of any errors
func ReadOrEmptyUnsafe(id string, platformID common.PlatformID) func (conn common.DynamoDBConnection) []StrategyInitiativeCommunity {
	return func (conn common.DynamoDBConnection) []StrategyInitiativeCommunity {
		out, err2 := ReadOrEmpty(id, platformID)(conn)
		core.ErrorHandler(err2, "daos/StrategyInitiativeCommunity", fmt.Sprintf("Error while reading id==%s, platformID==%s in %s\n", id, platformID, TableName(conn.ClientID)))
		return out
	}
}


// CreateOrUpdate saves the StrategyInitiativeCommunity regardless of if it exists.
func CreateOrUpdate(strategyInitiativeCommunity StrategyInitiativeCommunity) common.ConnectionProc {
	return func (conn common.DynamoDBConnection) (err error) {
		strategyInitiativeCommunity.ModifiedAt = core.CurrentRFCTimestamp()
	if strategyInitiativeCommunity.CreatedAt == "" { strategyInitiativeCommunity.CreatedAt = strategyInitiativeCommunity.ModifiedAt }
	
		var olds []StrategyInitiativeCommunity
		olds, err = ReadOrEmpty(strategyInitiativeCommunity.ID, strategyInitiativeCommunity.PlatformID)(conn)
		err = errors.Wrapf(err, "StrategyInitiativeCommunity DAO.CreateOrUpdate(id = id==%s, platformID==%s) couldn't ReadOrEmpty", strategyInitiativeCommunity.ID, strategyInitiativeCommunity.PlatformID)
		if err == nil {
			if len(olds) == 0 {
				err = Create(strategyInitiativeCommunity)(conn)
				err = errors.Wrapf(err, "StrategyInitiativeCommunity DAO.CreateOrUpdate couldn't Create in table %s", TableName(conn.ClientID))
			} else {
				emptyFields, ok := strategyInitiativeCommunity.CollectEmptyFields()
				if ok {
					old := olds[0]
					strategyInitiativeCommunity.CreatedAt  = old.CreatedAt
					strategyInitiativeCommunity.ModifiedAt = core.CurrentRFCTimestamp()
					key := idParams(old.ID, old.PlatformID)
					expr, exprAttributes, names := updateExpression(strategyInitiativeCommunity, old)
					input := dynamodb.UpdateItemInput{
						ExpressionAttributeValues: exprAttributes,
						TableName:                 aws.String(TableName(conn.ClientID)),
						Key:                       key,
						ReturnValues:              aws.String("UPDATED_NEW"),
						UpdateExpression:          aws.String(expr),
					}
					if names != nil { input.ExpressionAttributeNames = *names } // workaround for a pointer to an empty slice
					if  len(exprAttributes) > 0 { // if there some changes
						err = conn.Dynamo.UpdateItemInternal(input)
					} else {
						// WARN: no changes.
					}
					err = errors.Wrapf(err, "StrategyInitiativeCommunity DAO.CreateOrUpdate(id = %v) couldn't UpdateTableEntry in table %s, expression='%s'", key, TableName(conn.ClientID), expr)
				} else {
					err = fmt.Errorf("Cannot update entity with empty required fields: %v", emptyFields)
				}
			}
		}
		return 
	}
}


// CreateOrUpdateUnsafe saves the StrategyInitiativeCommunity regardless of if it exists.
func CreateOrUpdateUnsafe(strategyInitiativeCommunity StrategyInitiativeCommunity) func (conn common.DynamoDBConnection) {
	return func (conn common.DynamoDBConnection) {
		err2 := CreateOrUpdate(strategyInitiativeCommunity)(conn)
		core.ErrorHandler(err2, "daos/StrategyInitiativeCommunity", fmt.Sprintf("could not create or update %v in %s\n", strategyInitiativeCommunity, TableName(conn.ClientID)))
	}
}


// Delete removes StrategyInitiativeCommunity from db
func Delete(id string, platformID common.PlatformID) func (conn common.DynamoDBConnection) error {
	return func (conn common.DynamoDBConnection) error {
		return conn.Dynamo.DeleteEntry(TableName(conn.ClientID), idParams(id, platformID))
	}
}


// DeleteUnsafe deletes StrategyInitiativeCommunity and panics in case of errors.
func DeleteUnsafe(id string, platformID common.PlatformID) func (conn common.DynamoDBConnection) {
	return func (conn common.DynamoDBConnection) {
		err2 := Delete(id, platformID)(conn)
		core.ErrorHandler(err2, "daos/StrategyInitiativeCommunity", fmt.Sprintf("Could not delete id==%s, platformID==%s in %s\n", id, platformID, TableName(conn.ClientID)))
	}
}


func ReadByPlatformID(platformID common.PlatformID) func (conn common.DynamoDBConnection) (out []StrategyInitiativeCommunity, err error) {
	return func (conn common.DynamoDBConnection) (out []StrategyInitiativeCommunity, err error) {
		var instances []StrategyInitiativeCommunity
		err = conn.Dynamo.QueryTableWithIndex(TableName(conn.ClientID), awsutils.DynamoIndexExpression{
			IndexName: "PlatformIDIndex",
			Condition: "platform_id = :a0",
			Attributes: map[string]interface{}{
				":a0": platformID,
			},
		}, map[string]string{}, true, -1, &instances)
		out = instances
		return
	}
}


func ReadByPlatformIDUnsafe(platformID common.PlatformID) func (conn common.DynamoDBConnection) (out []StrategyInitiativeCommunity) {
	return func (conn common.DynamoDBConnection) (out []StrategyInitiativeCommunity) {
		out, err2 := ReadByPlatformID(platformID)(conn)
		core.ErrorHandler(err2, "daos/StrategyInitiativeCommunity", fmt.Sprintf("Could not query PlatformIDIndex on %s table\n", TableName(conn.ClientID)))
		return
	}
}

