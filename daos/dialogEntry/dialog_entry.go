package dialogEntry
// This file has been automatically generated by `adaptive/scripts`
// The changes will be overridden by the next automatic generation.
import (
	"github.com/aws/aws-sdk-go/aws"
	awsutils "github.com/adaptiveteam/adaptive/aws-utils-go"
	common "github.com/adaptiveteam/adaptive/daos/common"
	core "github.com/adaptiveteam/adaptive/core-utils-go"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/pkg/errors"
	"fmt"
	"encoding/json"
	"strings"
)

// DialogEntry stores all of the  relevant information for a piece of dialog including:
type DialogEntry struct  {
	// This is an immutable UUID that developers can use
	DialogID string `json:"dialog_id"`
	// This is the context path for the piece of dialog
	Context string `json:"context"`
	// This is the dialog subject
	Subject string `json:"subject"`
	// This was when the dialog was last updated
	Updated string `json:"updated"`
	// These are the dialog options
	Dialog []string `json:"dialog"`
	// Comments to help cultivators understand the dialog intent
	Comments []string `json:"comments"`
	// This the link to the LearnMore page
	LearnMoreLink string `json:"learn_more_link"`
	// This is the actual content from the LearnMore page
	LearnMoreContent string `json:"learn_more_content"`
	BuildBranch string `json:"build_branch"`
	CultivationBranch string `json:"cultivation_branch"`
	MasterBranch string `json:"master_branch"`
	BuildID string `json:"build_id"`
}

// CollectEmptyFields returns entity field names that are empty.
// It also returns the boolean ok-flag if the list is empty.
func (dialogEntry DialogEntry)CollectEmptyFields() (emptyFields []string, ok bool) {
	if dialogEntry.DialogID == "" { emptyFields = append(emptyFields, "DialogID")}
	if dialogEntry.Context == "" { emptyFields = append(emptyFields, "Context")}
	if dialogEntry.Subject == "" { emptyFields = append(emptyFields, "Subject")}
	if dialogEntry.Updated == "" { emptyFields = append(emptyFields, "Updated")}
	if dialogEntry.Dialog == nil { emptyFields = append(emptyFields, "Dialog")}
	if dialogEntry.Comments == nil { emptyFields = append(emptyFields, "Comments")}
	if dialogEntry.LearnMoreLink == "" { emptyFields = append(emptyFields, "LearnMoreLink")}
	if dialogEntry.LearnMoreContent == "" { emptyFields = append(emptyFields, "LearnMoreContent")}
	if dialogEntry.BuildBranch == "" { emptyFields = append(emptyFields, "BuildBranch")}
	if dialogEntry.CultivationBranch == "" { emptyFields = append(emptyFields, "CultivationBranch")}
	if dialogEntry.MasterBranch == "" { emptyFields = append(emptyFields, "MasterBranch")}
	if dialogEntry.BuildID == "" { emptyFields = append(emptyFields, "BuildID")}
	ok = len(emptyFields) == 0
	return
}
// ToJSON returns json string
func (dialogEntry DialogEntry) ToJSON() (string, error) {
	b, err := json.Marshal(dialogEntry)
	return string(b), err
}

type DAO interface {
	Create(dialogEntry DialogEntry) error
	CreateUnsafe(dialogEntry DialogEntry)
	Read(dialogID string) (dialogEntry DialogEntry, err error)
	ReadUnsafe(dialogID string) (dialogEntry DialogEntry)
	ReadOrEmpty(dialogID string) (dialogEntry []DialogEntry, err error)
	ReadOrEmptyUnsafe(dialogID string) (dialogEntry []DialogEntry)
	CreateOrUpdate(dialogEntry DialogEntry) error
	CreateOrUpdateUnsafe(dialogEntry DialogEntry)
	Delete(dialogID string) error
	DeleteUnsafe(dialogID string)
	ReadByContextSubject(context string, subject string) (dialogEntry []DialogEntry, err error)
	ReadByContextSubjectUnsafe(context string, subject string) (dialogEntry []DialogEntry)
}

// DAOImpl - a container for all information needed to access a DynamoDB table
type DAOImpl struct {
	ConnGen   common.DynamoDBConnectionGen
}

// NewDAO creates an instance of DAO that will provide access to the table
func NewDAO(dynamo *awsutils.DynamoRequest, namespace, clientID string) DAO {
	if clientID == "" { panic(errors.New("Cannot create DialogEntry.DAO without clientID")) }
	return DAOImpl{
		ConnGen:   common.DynamoDBConnectionGen{
			Dynamo: dynamo, 
			TableNamePrefix: clientID,
		},
	}
}
// TableNameSuffixVar is a global variable that contains table name suffix.
// After renaming all tables this may be made `const`.
var TableNameSuffixVar = "_dialog_entry"

// TableName concatenates table name prefix and suffix and returns table name
func TableName(prefix string) string {
	return prefix + TableNameSuffixVar
}

// Create saves the DialogEntry.
func (d DAOImpl) Create(dialogEntry DialogEntry) (err error) {
	emptyFields, ok := dialogEntry.CollectEmptyFields()
	if ok {
		err = d.ConnGen.Dynamo.PutTableEntry(dialogEntry, TableName(d.ConnGen.TableNamePrefix))
	} else {
		err = fmt.Errorf("Cannot create entity with empty fields: %v", emptyFields)
	}
	return
}


// CreateUnsafe saves the DialogEntry.
func (d DAOImpl) CreateUnsafe(dialogEntry DialogEntry) {
	err2 := d.Create(dialogEntry)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("Could not create dialogID==%s in %s\n", dialogEntry.DialogID, TableName(d.ConnGen.TableNamePrefix)))
}


// Read reads DialogEntry
func (d DAOImpl) Read(dialogID string) (out DialogEntry, err error) {
	var outs []DialogEntry
	outs, err = d.ReadOrEmpty(dialogID)
	if err == nil && len(outs) == 0 {
		err = fmt.Errorf("Not found dialogID==%s in %s\n", dialogID, TableName(d.ConnGen.TableNamePrefix))
	}
	if len(outs) > 0 {
		out = outs[0]
	}
	return
}


// ReadUnsafe reads the DialogEntry. Panics in case of any errors
func (d DAOImpl) ReadUnsafe(dialogID string) DialogEntry {
	out, err2 := d.Read(dialogID)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("Error reading dialogID==%s in %s\n", dialogID, TableName(d.ConnGen.TableNamePrefix)))
	return out
}


// ReadOrEmpty reads DialogEntry
func (d DAOImpl) ReadOrEmpty(dialogID string) (out []DialogEntry, err error) {
	var outOrEmpty DialogEntry
	ids := idParams(dialogID)
	var found bool
	found, err = d.ConnGen.Dynamo.GetItemOrEmptyFromTable(TableName(d.ConnGen.TableNamePrefix), ids, &outOrEmpty)
	if found {
		if outOrEmpty.DialogID == dialogID {
			out = append(out, outOrEmpty)
		} else {
			err = fmt.Errorf("Requested ids: dialogID==%s are different from the found ones: dialogID==%s", dialogID, outOrEmpty.DialogID) // unexpected error: found ids != ids
		}
	}
	err = errors.Wrapf(err, "DialogEntry DAO.ReadOrEmpty(id = %v) couldn't GetItem in table %s", ids, TableName(d.ConnGen.TableNamePrefix))
	return
}


// ReadOrEmptyUnsafe reads the DialogEntry. Panics in case of any errors
func (d DAOImpl) ReadOrEmptyUnsafe(dialogID string) []DialogEntry {
	out, err2 := d.ReadOrEmpty(dialogID)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("Error while reading dialogID==%s in %s\n", dialogID, TableName(d.ConnGen.TableNamePrefix)))
	return out
}


// CreateOrUpdate saves the DialogEntry regardless of if it exists.
func (d DAOImpl) CreateOrUpdate(dialogEntry DialogEntry) (err error) {
	
	var olds []DialogEntry
	olds, err = d.ReadOrEmpty(dialogEntry.DialogID)
	err = errors.Wrapf(err, "DialogEntry DAO.CreateOrUpdate(id = dialogID==%s) couldn't ReadOrEmpty", dialogEntry.DialogID)
	if err == nil {
		if len(olds) == 0 {
			err = d.Create(dialogEntry)
			err = errors.Wrapf(err, "DialogEntry DAO.CreateOrUpdate couldn't Create in table %s", TableName(d.ConnGen.TableNamePrefix))
		} else {
			emptyFields, ok := dialogEntry.CollectEmptyFields()
			if ok {
				old := olds[0]
				
				
				key := idParams(old.DialogID)
				expr, exprAttributes, names := updateExpression(dialogEntry, old)
				input := dynamodb.UpdateItemInput{
					ExpressionAttributeValues: exprAttributes,
					TableName:                 aws.String(TableName(d.ConnGen.TableNamePrefix)),
					Key:                       key,
					ReturnValues:              aws.String("UPDATED_NEW"),
					UpdateExpression:          aws.String(expr),
				}
				if names != nil { input.ExpressionAttributeNames = *names } // workaround for a pointer to an empty slice
				if  len(exprAttributes) > 0 { // if there some changes
					err = d.ConnGen.Dynamo.UpdateItemInternal(input)
				} else {
					// WARN: no changes.
				}
				err = errors.Wrapf(err, "DialogEntry DAO.CreateOrUpdate(id = %v) couldn't UpdateTableEntry in table %s, expression='%s'", key, TableName(d.ConnGen.TableNamePrefix), expr)
			} else {
				err = fmt.Errorf("Cannot update entity with empty required fields: %v", emptyFields)
			}
		}
	}
	return 
}


// CreateOrUpdateUnsafe saves the DialogEntry regardless of if it exists.
func (d DAOImpl) CreateOrUpdateUnsafe(dialogEntry DialogEntry) {
	err2 := d.CreateOrUpdate(dialogEntry)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("could not create or update %v in %s\n", dialogEntry, TableName(d.ConnGen.TableNamePrefix)))
}


// Delete removes DialogEntry from db
func (d DAOImpl)Delete(dialogID string) error {
	return d.ConnGen.Dynamo.DeleteEntry(TableName(d.ConnGen.TableNamePrefix), idParams(dialogID))
}


// DeleteUnsafe deletes DialogEntry and panics in case of errors.
func (d DAOImpl)DeleteUnsafe(dialogID string) {
	err2 := d.Delete(dialogID)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("Could not delete dialogID==%s in %s\n", dialogID, TableName(d.ConnGen.TableNamePrefix)))
}


func (d DAOImpl)ReadByContextSubject(context string, subject string) (out []DialogEntry, err error) {
	var instances []DialogEntry
	err = d.ConnGen.Dynamo.QueryTableWithIndex(TableName(d.ConnGen.TableNamePrefix), awsutils.DynamoIndexExpression{
		IndexName: "ContextSubjectIndex",
		Condition: "context = :a0 and subject = :a1",
		Attributes: map[string]interface{}{
			":a0": context,
			":a1": subject,
		},
	}, map[string]string{}, true, -1, &instances)
	out = instances
	return
}


func (d DAOImpl)ReadByContextSubjectUnsafe(context string, subject string) (out []DialogEntry) {
	out, err2 := d.ReadByContextSubject(context, subject)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("Could not query ContextSubjectIndex on %s table\n", TableName(d.ConnGen.TableNamePrefix)))
	return
}

func idParams(dialogID string) map[string]*dynamodb.AttributeValue {
	params := map[string]*dynamodb.AttributeValue {
		"dialog_id": common.DynS(dialogID),
	}
	return params
}
func allParams(dialogEntry DialogEntry, old DialogEntry) (params map[string]*dynamodb.AttributeValue) {
	params = map[string]*dynamodb.AttributeValue{}
	if dialogEntry.DialogID != old.DialogID { params[":a0"] = common.DynS(dialogEntry.DialogID) }
	if dialogEntry.Context != old.Context { params[":a1"] = common.DynS(dialogEntry.Context) }
	if dialogEntry.Subject != old.Subject { params[":a2"] = common.DynS(dialogEntry.Subject) }
	if dialogEntry.Updated != old.Updated { params[":a3"] = common.DynS(dialogEntry.Updated) }
	if !common.StringArraysEqual(dialogEntry.Dialog, old.Dialog) { params[":a4"] = common.DynSS(dialogEntry.Dialog) }
	if !common.StringArraysEqual(dialogEntry.Comments, old.Comments) { params[":a5"] = common.DynSS(dialogEntry.Comments) }
	if dialogEntry.LearnMoreLink != old.LearnMoreLink { params[":a6"] = common.DynS(dialogEntry.LearnMoreLink) }
	if dialogEntry.LearnMoreContent != old.LearnMoreContent { params[":a7"] = common.DynS(dialogEntry.LearnMoreContent) }
	if dialogEntry.BuildBranch != old.BuildBranch { params[":a8"] = common.DynS(dialogEntry.BuildBranch) }
	if dialogEntry.CultivationBranch != old.CultivationBranch { params[":a9"] = common.DynS(dialogEntry.CultivationBranch) }
	if dialogEntry.MasterBranch != old.MasterBranch { params[":a10"] = common.DynS(dialogEntry.MasterBranch) }
	if dialogEntry.BuildID != old.BuildID { params[":a11"] = common.DynS(dialogEntry.BuildID) }
	return
}
func updateExpression(dialogEntry DialogEntry, old DialogEntry) (expr string, params map[string]*dynamodb.AttributeValue, namesPtr *map[string]*string) {
	var updateParts []string
	params = map[string]*dynamodb.AttributeValue{}
	names := map[string]*string{}
	if dialogEntry.DialogID != old.DialogID { updateParts = append(updateParts, "dialog_id = :a0"); params[":a0"] = common.DynS(dialogEntry.DialogID);  }
	if dialogEntry.Context != old.Context { updateParts = append(updateParts, "context = :a1"); params[":a1"] = common.DynS(dialogEntry.Context);  }
	if dialogEntry.Subject != old.Subject { updateParts = append(updateParts, "subject = :a2"); params[":a2"] = common.DynS(dialogEntry.Subject);  }
	if dialogEntry.Updated != old.Updated { updateParts = append(updateParts, "updated = :a3"); params[":a3"] = common.DynS(dialogEntry.Updated);  }
	if !common.StringArraysEqual(dialogEntry.Dialog, old.Dialog) { updateParts = append(updateParts, "dialog = :a4"); params[":a4"] = common.DynSS(dialogEntry.Dialog);  }
	if !common.StringArraysEqual(dialogEntry.Comments, old.Comments) { updateParts = append(updateParts, "comments = :a5"); params[":a5"] = common.DynSS(dialogEntry.Comments);  }
	if dialogEntry.LearnMoreLink != old.LearnMoreLink { updateParts = append(updateParts, "learn_more_link = :a6"); params[":a6"] = common.DynS(dialogEntry.LearnMoreLink);  }
	if dialogEntry.LearnMoreContent != old.LearnMoreContent { updateParts = append(updateParts, "learn_more_content = :a7"); params[":a7"] = common.DynS(dialogEntry.LearnMoreContent);  }
	if dialogEntry.BuildBranch != old.BuildBranch { updateParts = append(updateParts, "build_branch = :a8"); params[":a8"] = common.DynS(dialogEntry.BuildBranch);  }
	if dialogEntry.CultivationBranch != old.CultivationBranch { updateParts = append(updateParts, "cultivation_branch = :a9"); params[":a9"] = common.DynS(dialogEntry.CultivationBranch);  }
	if dialogEntry.MasterBranch != old.MasterBranch { updateParts = append(updateParts, "master_branch = :a10"); params[":a10"] = common.DynS(dialogEntry.MasterBranch);  }
	if dialogEntry.BuildID != old.BuildID { updateParts = append(updateParts, "build_id = :a11"); params[":a11"] = common.DynS(dialogEntry.BuildID);  }
	expr = "set " + strings.Join(updateParts, ", ")
	if len(names) == 0 { namesPtr = nil } else { namesPtr = &names } // workaround for ValidationException: ExpressionAttributeNames must not be empty
	return
}
