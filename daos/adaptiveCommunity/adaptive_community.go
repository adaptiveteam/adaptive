package adaptiveCommunity
// This file has been automatically generated by `adaptive/scripts`
// The changes will be overridden by the next automatic generation.
import (
	"github.com/aws/aws-sdk-go/aws"
	awsutils "github.com/adaptiveteam/adaptive/aws-utils-go"
	common "github.com/adaptiveteam/adaptive/daos/common"
	core "github.com/adaptiveteam/adaptive/core-utils-go"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/pkg/errors"
	"fmt"
	"encoding/json"
	"strings"
)

type AdaptiveCommunity struct  {
	PlatformID common.PlatformID `json:"platform_id"`
	ID string `json:"id"`
	// ChannelID is a channel identifier. TODO: rename db field `channel` to `channel_id`
	ChannelID string `json:"channel"`
	Active bool `json:"active"`
	RequestedBy string `json:"requested_by"`
	// Automatically maintained field
	CreatedAt string `json:"created_at"`
	// Automatically maintained field
	ModifiedAt string `json:"modified_at,omitempty"`
	DeactivatedAt string `json:"deactivated_at,omitempty"`
}

// AdaptiveCommunityFilterActive removes deactivated values
func AdaptiveCommunityFilterActive(in []AdaptiveCommunity) (res []AdaptiveCommunity) {
	for _, i := range in {
		if i.DeactivatedAt == "" {
			res = append(res, i)
		}
	}
	return
}

// CollectEmptyFields returns entity field names that are empty.
// It also returns the boolean ok-flag if the list is empty.
func (adaptiveCommunity AdaptiveCommunity)CollectEmptyFields() (emptyFields []string, ok bool) {
	if adaptiveCommunity.PlatformID == "" { emptyFields = append(emptyFields, "PlatformID")}
	if adaptiveCommunity.ID == "" { emptyFields = append(emptyFields, "ID")}
	if adaptiveCommunity.ChannelID == "" { emptyFields = append(emptyFields, "ChannelID")}
	if adaptiveCommunity.RequestedBy == "" { emptyFields = append(emptyFields, "RequestedBy")}
	ok = len(emptyFields) == 0
	return
}
// ToJSON returns json string
func (adaptiveCommunity AdaptiveCommunity) ToJSON() (string, error) {
	b, err := json.Marshal(adaptiveCommunity)
	return string(b), err
}

type DAO interface {
	Create(adaptiveCommunity AdaptiveCommunity) error
	CreateUnsafe(adaptiveCommunity AdaptiveCommunity)
	Read(platformID common.PlatformID, id string) (adaptiveCommunity AdaptiveCommunity, err error)
	ReadUnsafe(platformID common.PlatformID, id string) (adaptiveCommunity AdaptiveCommunity)
	ReadOrEmpty(platformID common.PlatformID, id string) (adaptiveCommunity []AdaptiveCommunity, err error)
	ReadOrEmptyUnsafe(platformID common.PlatformID, id string) (adaptiveCommunity []AdaptiveCommunity)
	CreateOrUpdate(adaptiveCommunity AdaptiveCommunity) error
	CreateOrUpdateUnsafe(adaptiveCommunity AdaptiveCommunity)
	Deactivate(platformID common.PlatformID, id string) error
	DeactivateUnsafe(platformID common.PlatformID, id string)
	ReadByChannel(channelID string) (adaptiveCommunity []AdaptiveCommunity, err error)
	ReadByChannelUnsafe(channelID string) (adaptiveCommunity []AdaptiveCommunity)
	ReadByPlatformID(platformID common.PlatformID) (adaptiveCommunity []AdaptiveCommunity, err error)
	ReadByPlatformIDUnsafe(platformID common.PlatformID) (adaptiveCommunity []AdaptiveCommunity)
}

// DAOImpl - a container for all information needed to access a DynamoDB table
type DAOImpl struct {
	ConnGen   common.DynamoDBConnectionGen
}

// NewDAO creates an instance of DAO that will provide access to the table
func NewDAO(dynamo *awsutils.DynamoRequest, namespace, clientID string) DAO {
	if clientID == "" { panic(errors.New("Cannot create AdaptiveCommunity.DAO without clientID")) }
	return DAOImpl{
		ConnGen:   common.DynamoDBConnectionGen{
			Dynamo: dynamo, 
			TableNamePrefix: clientID,
		},
	}
}
// TableNameSuffixVar is a global variable that contains table name suffix.
// After renaming all tables this may be made `const`.
var TableNameSuffixVar = "_adaptive_community"

// TableName concatenates table name prefix and suffix and returns table name
func TableName(prefix string) string {
	return prefix + TableNameSuffixVar
}

// Create saves the AdaptiveCommunity.
func (d DAOImpl) Create(adaptiveCommunity AdaptiveCommunity) (err error) {
	emptyFields, ok := adaptiveCommunity.CollectEmptyFields()
	if ok {
		adaptiveCommunity.ModifiedAt = core.CurrentRFCTimestamp()
	adaptiveCommunity.CreatedAt = adaptiveCommunity.ModifiedAt
	err = d.ConnGen.Dynamo.PutTableEntry(adaptiveCommunity, TableName(d.ConnGen.TableNamePrefix))
	} else {
		err = fmt.Errorf("Cannot create entity with empty fields: %v", emptyFields)
	}
	return
}


// CreateUnsafe saves the AdaptiveCommunity.
func (d DAOImpl) CreateUnsafe(adaptiveCommunity AdaptiveCommunity) {
	err2 := d.Create(adaptiveCommunity)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("Could not create platformID==%s, id==%s in %s\n", adaptiveCommunity.PlatformID, adaptiveCommunity.ID, TableName(d.ConnGen.TableNamePrefix)))
}


// Read reads AdaptiveCommunity
func (d DAOImpl) Read(platformID common.PlatformID, id string) (out AdaptiveCommunity, err error) {
	var outs []AdaptiveCommunity
	outs, err = d.ReadOrEmpty(platformID, id)
	if err == nil && len(outs) == 0 {
		err = fmt.Errorf("Not found platformID==%s, id==%s in %s\n", platformID, id, TableName(d.ConnGen.TableNamePrefix))
	}
	if len(outs) > 0 {
		out = outs[0]
	}
	return
}


// ReadUnsafe reads the AdaptiveCommunity. Panics in case of any errors
func (d DAOImpl) ReadUnsafe(platformID common.PlatformID, id string) AdaptiveCommunity {
	out, err2 := d.Read(platformID, id)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("Error reading platformID==%s, id==%s in %s\n", platformID, id, TableName(d.ConnGen.TableNamePrefix)))
	return out
}


// ReadOrEmpty reads AdaptiveCommunity
func (d DAOImpl) ReadOrEmpty(platformID common.PlatformID, id string) (out []AdaptiveCommunity, err error) {
	var outOrEmpty AdaptiveCommunity
	ids := idParams(platformID, id)
	var found bool
	found, err = d.ConnGen.Dynamo.GetItemOrEmptyFromTable(TableName(d.ConnGen.TableNamePrefix), ids, &outOrEmpty)
	if found {
		if outOrEmpty.PlatformID == platformID && outOrEmpty.ID == id {
			out = append(out, outOrEmpty)
		} else {
			err = fmt.Errorf("Requested ids: platformID==%s, id==%s are different from the found ones: platformID==%s, id==%s", platformID, id, outOrEmpty.PlatformID, outOrEmpty.ID) // unexpected error: found ids != ids
		}
	}
	err = errors.Wrapf(err, "AdaptiveCommunity DAO.ReadOrEmpty(id = %v) couldn't GetItem in table %s", ids, TableName(d.ConnGen.TableNamePrefix))
	return
}


// ReadOrEmptyUnsafe reads the AdaptiveCommunity. Panics in case of any errors
func (d DAOImpl) ReadOrEmptyUnsafe(platformID common.PlatformID, id string) []AdaptiveCommunity {
	out, err2 := d.ReadOrEmpty(platformID, id)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("Error while reading platformID==%s, id==%s in %s\n", platformID, id, TableName(d.ConnGen.TableNamePrefix)))
	return out
}


// CreateOrUpdate saves the AdaptiveCommunity regardless of if it exists.
func (d DAOImpl) CreateOrUpdate(adaptiveCommunity AdaptiveCommunity) (err error) {
	adaptiveCommunity.ModifiedAt = core.CurrentRFCTimestamp()
	if adaptiveCommunity.CreatedAt == "" { adaptiveCommunity.CreatedAt = adaptiveCommunity.ModifiedAt }
	
	var olds []AdaptiveCommunity
	olds, err = d.ReadOrEmpty(adaptiveCommunity.PlatformID, adaptiveCommunity.ID)
	err = errors.Wrapf(err, "AdaptiveCommunity DAO.CreateOrUpdate(id = platformID==%s, id==%s) couldn't ReadOrEmpty", adaptiveCommunity.PlatformID, adaptiveCommunity.ID)
	if err == nil {
		if len(olds) == 0 {
			err = d.Create(adaptiveCommunity)
			err = errors.Wrapf(err, "AdaptiveCommunity DAO.CreateOrUpdate couldn't Create in table %s", TableName(d.ConnGen.TableNamePrefix))
		} else {
			emptyFields, ok := adaptiveCommunity.CollectEmptyFields()
			if ok {
				old := olds[0]
				adaptiveCommunity.CreatedAt  = old.CreatedAt
				adaptiveCommunity.ModifiedAt = core.CurrentRFCTimestamp()
				key := idParams(old.PlatformID, old.ID)
				expr, exprAttributes, names := updateExpression(adaptiveCommunity, old)
				input := dynamodb.UpdateItemInput{
					ExpressionAttributeValues: exprAttributes,
					TableName:                 aws.String(TableName(d.ConnGen.TableNamePrefix)),
					Key:                       key,
					ReturnValues:              aws.String("UPDATED_NEW"),
					UpdateExpression:          aws.String(expr),
				}
				if names != nil { input.ExpressionAttributeNames = *names } // workaround for a pointer to an empty slice
				if  len(exprAttributes) > 0 { // if there some changes
					err = d.ConnGen.Dynamo.UpdateItemInternal(input)
				} else {
					// WARN: no changes.
				}
				err = errors.Wrapf(err, "AdaptiveCommunity DAO.CreateOrUpdate(id = %v) couldn't UpdateTableEntry in table %s, expression='%s'", key, TableName(d.ConnGen.TableNamePrefix), expr)
			} else {
				err = fmt.Errorf("Cannot update entity with empty required fields: %v", emptyFields)
			}
		}
	}
	return 
}


// CreateOrUpdateUnsafe saves the AdaptiveCommunity regardless of if it exists.
func (d DAOImpl) CreateOrUpdateUnsafe(adaptiveCommunity AdaptiveCommunity) {
	err2 := d.CreateOrUpdate(adaptiveCommunity)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("could not create or update %v in %s\n", adaptiveCommunity, TableName(d.ConnGen.TableNamePrefix)))
}


// Deactivate "removes" AdaptiveCommunity. 
// The mechanism is adding timestamp to `DeactivatedOn` field. 
// Then, if this field is not empty, the instance is considered to be "active"
func (d DAOImpl)Deactivate(platformID common.PlatformID, id string) error {
	instance, err2 := d.Read(platformID, id)
	if err2 == nil {
		instance.DeactivatedAt = core.CurrentRFCTimestamp()
		err2 = d.CreateOrUpdate(instance)
	}
	return err2
}


// DeactivateUnsafe "deletes" AdaptiveCommunity and panics in case of errors.
func (d DAOImpl)DeactivateUnsafe(platformID common.PlatformID, id string) {
	err2 := d.Deactivate(platformID, id)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("Could not deactivate platformID==%s, id==%s in %s\n", platformID, id, TableName(d.ConnGen.TableNamePrefix)))
}


func (d DAOImpl)ReadByChannel(channelID string) (out []AdaptiveCommunity, err error) {
	var instances []AdaptiveCommunity
	err = d.ConnGen.Dynamo.QueryTableWithIndex(TableName(d.ConnGen.TableNamePrefix), awsutils.DynamoIndexExpression{
		IndexName: "ChannelIndex",
		Condition: "channel = :a0",
		Attributes: map[string]interface{}{
			":a0": channelID,
		},
	}, map[string]string{}, true, -1, &instances)
	out = AdaptiveCommunityFilterActive(instances)
	return
}


func (d DAOImpl)ReadByChannelUnsafe(channelID string) (out []AdaptiveCommunity) {
	out, err2 := d.ReadByChannel(channelID)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("Could not query ChannelIndex on %s table\n", TableName(d.ConnGen.TableNamePrefix)))
	return
}


func (d DAOImpl)ReadByPlatformID(platformID common.PlatformID) (out []AdaptiveCommunity, err error) {
	var instances []AdaptiveCommunity
	err = d.ConnGen.Dynamo.QueryTableWithIndex(TableName(d.ConnGen.TableNamePrefix), awsutils.DynamoIndexExpression{
		IndexName: "PlatformIDIndex",
		Condition: "platform_id = :a0",
		Attributes: map[string]interface{}{
			":a0": platformID,
		},
	}, map[string]string{}, true, -1, &instances)
	out = AdaptiveCommunityFilterActive(instances)
	return
}


func (d DAOImpl)ReadByPlatformIDUnsafe(platformID common.PlatformID) (out []AdaptiveCommunity) {
	out, err2 := d.ReadByPlatformID(platformID)
	core.ErrorHandler(err2, TableNameSuffixVar, fmt.Sprintf("Could not query PlatformIDIndex on %s table\n", TableName(d.ConnGen.TableNamePrefix)))
	return
}

func idParams(platformID common.PlatformID, id string) map[string]*dynamodb.AttributeValue {
	params := map[string]*dynamodb.AttributeValue {
		"platform_id": common.DynS(string(platformID)),
		"id": common.DynS(id),
	}
	return params
}
func allParams(adaptiveCommunity AdaptiveCommunity, old AdaptiveCommunity) (params map[string]*dynamodb.AttributeValue) {
	params = map[string]*dynamodb.AttributeValue{}
	if adaptiveCommunity.PlatformID != old.PlatformID { params[":a0"] = common.DynS(string(adaptiveCommunity.PlatformID)) }
	if adaptiveCommunity.ID != old.ID { params[":a1"] = common.DynS(adaptiveCommunity.ID) }
	if adaptiveCommunity.ChannelID != old.ChannelID { params[":a2"] = common.DynS(adaptiveCommunity.ChannelID) }
	if adaptiveCommunity.Active != old.Active { params[":a3"] = common.DynBOOL(adaptiveCommunity.Active) }
	if adaptiveCommunity.RequestedBy != old.RequestedBy { params[":a4"] = common.DynS(adaptiveCommunity.RequestedBy) }
	if adaptiveCommunity.CreatedAt != old.CreatedAt { params[":a5"] = common.DynS(adaptiveCommunity.CreatedAt) }
	if adaptiveCommunity.ModifiedAt != old.ModifiedAt { params[":a6"] = common.DynS(adaptiveCommunity.ModifiedAt) }
	if adaptiveCommunity.DeactivatedAt != old.DeactivatedAt { params[":a7"] = common.DynS(adaptiveCommunity.DeactivatedAt) }
	return
}
func updateExpression(adaptiveCommunity AdaptiveCommunity, old AdaptiveCommunity) (expr string, params map[string]*dynamodb.AttributeValue, namesPtr *map[string]*string) {
	var updateParts []string
	params = map[string]*dynamodb.AttributeValue{}
	names := map[string]*string{}
	if adaptiveCommunity.PlatformID != old.PlatformID { updateParts = append(updateParts, "platform_id = :a0"); params[":a0"] = common.DynS(string(adaptiveCommunity.PlatformID));  }
	if adaptiveCommunity.ID != old.ID { updateParts = append(updateParts, "id = :a1"); params[":a1"] = common.DynS(adaptiveCommunity.ID);  }
	if adaptiveCommunity.ChannelID != old.ChannelID { updateParts = append(updateParts, "channel = :a2"); params[":a2"] = common.DynS(adaptiveCommunity.ChannelID);  }
	if adaptiveCommunity.Active != old.Active { updateParts = append(updateParts, "active = :a3"); params[":a3"] = common.DynBOOL(adaptiveCommunity.Active);  }
	if adaptiveCommunity.RequestedBy != old.RequestedBy { updateParts = append(updateParts, "requested_by = :a4"); params[":a4"] = common.DynS(adaptiveCommunity.RequestedBy);  }
	if adaptiveCommunity.CreatedAt != old.CreatedAt { updateParts = append(updateParts, "created_at = :a5"); params[":a5"] = common.DynS(adaptiveCommunity.CreatedAt);  }
	if adaptiveCommunity.ModifiedAt != old.ModifiedAt { updateParts = append(updateParts, "modified_at = :a6"); params[":a6"] = common.DynS(adaptiveCommunity.ModifiedAt);  }
	if adaptiveCommunity.DeactivatedAt != old.DeactivatedAt { updateParts = append(updateParts, "deactivated_at = :a7"); params[":a7"] = common.DynS(adaptiveCommunity.DeactivatedAt);  }
	expr = "set " + strings.Join(updateParts, ", ")
	if len(names) == 0 { namesPtr = nil } else { namesPtr = &names } // workaround for ValidationException: ExpressionAttributeNames must not be empty
	return
}
