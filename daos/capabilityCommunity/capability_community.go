package capabilityCommunity
// This file has been automatically generated by `adaptive/scripts`
// The changes will be overridden by the next automatic generation.
import (
	"github.com/aws/aws-sdk-go/aws"
	awsutils "github.com/adaptiveteam/adaptive/aws-utils-go"
	common "github.com/adaptiveteam/adaptive/daos/common"
	core "github.com/adaptiveteam/adaptive/core-utils-go"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/pkg/errors"
	"fmt"
	"encoding/json"
	"strings"
)

type CapabilityCommunity struct  {
	PlatformID common.PlatformID `json:"platform_id"`
	ID string `json:"id"`
	Name string `json:"name"`
	Description string `json:"description"`
	Advocate string `json:"advocate"`
	CreatedBy string `json:"created_by"`
	// Automatically maintained field
	CreatedAt string `json:"created_at"`
	// Automatically maintained field
	ModifiedAt string `json:"modified_at,omitempty"`
}

// CollectEmptyFields returns entity field names that are empty.
// It also returns the boolean ok-flag if the list is empty.
func (capabilityCommunity CapabilityCommunity)CollectEmptyFields() (emptyFields []string, ok bool) {
	if capabilityCommunity.PlatformID == "" { emptyFields = append(emptyFields, "PlatformID")}
	if capabilityCommunity.ID == "" { emptyFields = append(emptyFields, "ID")}
	if capabilityCommunity.Name == "" { emptyFields = append(emptyFields, "Name")}
	if capabilityCommunity.Description == "" { emptyFields = append(emptyFields, "Description")}
	if capabilityCommunity.Advocate == "" { emptyFields = append(emptyFields, "Advocate")}
	if capabilityCommunity.CreatedBy == "" { emptyFields = append(emptyFields, "CreatedBy")}
	ok = len(emptyFields) == 0
	return
}
// ToJSON returns json string
func (capabilityCommunity CapabilityCommunity) ToJSON() (string, error) {
	b, err := json.Marshal(capabilityCommunity)
	return string(b), err
}

type DAO interface {
	Create(capabilityCommunity CapabilityCommunity) error
	CreateUnsafe(capabilityCommunity CapabilityCommunity)
	Read(platformID common.PlatformID, id string) (capabilityCommunity CapabilityCommunity, err error)
	ReadUnsafe(platformID common.PlatformID, id string) (capabilityCommunity CapabilityCommunity)
	ReadOrEmpty(platformID common.PlatformID, id string) (capabilityCommunity []CapabilityCommunity, err error)
	ReadOrEmptyUnsafe(platformID common.PlatformID, id string) (capabilityCommunity []CapabilityCommunity)
	CreateOrUpdate(capabilityCommunity CapabilityCommunity) error
	CreateOrUpdateUnsafe(capabilityCommunity CapabilityCommunity)
	Delete(platformID common.PlatformID, id string) error
	DeleteUnsafe(platformID common.PlatformID, id string)
	ReadByPlatformID(platformID common.PlatformID) (capabilityCommunity []CapabilityCommunity, err error)
	ReadByPlatformIDUnsafe(platformID common.PlatformID) (capabilityCommunity []CapabilityCommunity)
}

// DAOImpl - a container for all information needed to access a DynamoDB table
type DAOImpl struct {
	Dynamo    *awsutils.DynamoRequest `json:"dynamo"`
	Namespace string                  `json:"namespace"`
	Name      string                  `json:"name"`
}

// NewDAO creates an instance of DAO that will provide access to the table
func NewDAO(dynamo *awsutils.DynamoRequest, namespace, clientID string) DAO {
	if clientID == "" { panic(errors.New("Cannot create CapabilityCommunity.DAO without clientID")) }
	return DAOImpl{Dynamo: dynamo, Namespace: namespace, 
		Name: TableName(clientID),
	}
}

// NewDAOByTableName creates an instance of DAO that will provide access to the table
func NewDAOByTableName(dynamo *awsutils.DynamoRequest, namespace, tableName string) DAO {
	if tableName == "" { panic(errors.New("Cannot create CapabilityCommunity.DAO without tableName")) }
	return DAOImpl{Dynamo: dynamo, Namespace: namespace, 
		Name: tableName,
	}
}
// TableNameSuffixVar is a global variable that contains table name suffix.
// After renaming all tables this may be made `const`.
var TableNameSuffixVar = "_capability_community"

// TableName concatenates table name prefix and suffix and returns table name
func TableName(prefix string) string {
	return prefix + TableNameSuffixVar
}

// Create saves the CapabilityCommunity.
func (d DAOImpl) Create(capabilityCommunity CapabilityCommunity) (err error) {
	emptyFields, ok := capabilityCommunity.CollectEmptyFields()
	if ok {
		capabilityCommunity.ModifiedAt = core.CurrentRFCTimestamp()
	capabilityCommunity.CreatedAt = capabilityCommunity.ModifiedAt
	err = d.Dynamo.PutTableEntry(capabilityCommunity, d.Name)
	} else {
		err = fmt.Errorf("Cannot create entity with empty fields: %v", emptyFields)
	}
	return
}


// CreateUnsafe saves the CapabilityCommunity.
func (d DAOImpl) CreateUnsafe(capabilityCommunity CapabilityCommunity) {
	err2 := d.Create(capabilityCommunity)
	core.ErrorHandler(err2, d.Namespace, fmt.Sprintf("Could not create platformID==%s, id==%s in %s\n", capabilityCommunity.PlatformID, capabilityCommunity.ID, d.Name))
}


// Read reads CapabilityCommunity
func (d DAOImpl) Read(platformID common.PlatformID, id string) (out CapabilityCommunity, err error) {
	var outs []CapabilityCommunity
	outs, err = d.ReadOrEmpty(platformID, id)
	if err == nil && len(outs) == 0 {
		err = fmt.Errorf("Not found platformID==%s, id==%s in %s\n", platformID, id, d.Name)
	}
	if len(outs) > 0 {
		out = outs[0]
	}
	return
}


// ReadUnsafe reads the CapabilityCommunity. Panics in case of any errors
func (d DAOImpl) ReadUnsafe(platformID common.PlatformID, id string) CapabilityCommunity {
	out, err2 := d.Read(platformID, id)
	core.ErrorHandler(err2, d.Namespace, fmt.Sprintf("Error reading platformID==%s, id==%s in %s\n", platformID, id, d.Name))
	return out
}


// ReadOrEmpty reads CapabilityCommunity
func (d DAOImpl) ReadOrEmpty(platformID common.PlatformID, id string) (out []CapabilityCommunity, err error) {
	var outOrEmpty CapabilityCommunity
	ids := idParams(platformID, id)
	var found bool
	found, err = d.Dynamo.GetItemOrEmptyFromTable(d.Name, ids, &outOrEmpty)
	if found {
		if outOrEmpty.PlatformID == platformID && outOrEmpty.ID == id {
			out = append(out, outOrEmpty)
		} else {
			err = fmt.Errorf("Requested ids: platformID==%s, id==%s are different from the found ones: platformID==%s, id==%s", platformID, id, outOrEmpty.PlatformID, outOrEmpty.ID) // unexpected error: found ids != ids
		}
	}
	err = errors.Wrapf(err, "CapabilityCommunity DAO.ReadOrEmpty(id = %v) couldn't GetItem in table %s", ids, d.Name)
	return
}


// ReadOrEmptyUnsafe reads the CapabilityCommunity. Panics in case of any errors
func (d DAOImpl) ReadOrEmptyUnsafe(platformID common.PlatformID, id string) []CapabilityCommunity {
	out, err2 := d.ReadOrEmpty(platformID, id)
	core.ErrorHandler(err2, d.Namespace, fmt.Sprintf("Error while reading platformID==%s, id==%s in %s\n", platformID, id, d.Name))
	return out
}


// CreateOrUpdate saves the CapabilityCommunity regardless of if it exists.
func (d DAOImpl) CreateOrUpdate(capabilityCommunity CapabilityCommunity) (err error) {
	capabilityCommunity.ModifiedAt = core.CurrentRFCTimestamp()
	if capabilityCommunity.CreatedAt == "" { capabilityCommunity.CreatedAt = capabilityCommunity.ModifiedAt }
	
	var olds []CapabilityCommunity
	olds, err = d.ReadOrEmpty(capabilityCommunity.PlatformID, capabilityCommunity.ID)
	err = errors.Wrapf(err, "CapabilityCommunity DAO.CreateOrUpdate(id = platformID==%s, id==%s) couldn't ReadOrEmpty", capabilityCommunity.PlatformID, capabilityCommunity.ID)
	if err == nil {
		if len(olds) == 0 {
			err = d.Create(capabilityCommunity)
			err = errors.Wrapf(err, "CapabilityCommunity DAO.CreateOrUpdate couldn't Create in table %s", d.Name)
		} else {
			emptyFields, ok := capabilityCommunity.CollectEmptyFields()
			if ok {
				old := olds[0]
				capabilityCommunity.CreatedAt  = old.CreatedAt
				capabilityCommunity.ModifiedAt = core.CurrentRFCTimestamp()
				key := idParams(old.PlatformID, old.ID)
				expr, exprAttributes, names := updateExpression(capabilityCommunity, old)
				input := dynamodb.UpdateItemInput{
					ExpressionAttributeValues: exprAttributes,
					TableName:                 aws.String(d.Name),
					Key:                       key,
					ReturnValues:              aws.String("UPDATED_NEW"),
					UpdateExpression:          aws.String(expr),
				}
				if names != nil { input.ExpressionAttributeNames = *names } // workaround for a pointer to an empty slice
				if  len(exprAttributes) > 0 { // if there some changes
					err = d.Dynamo.UpdateItemInternal(input)
				} else {
					// WARN: no changes.
				}
				err = errors.Wrapf(err, "CapabilityCommunity DAO.CreateOrUpdate(id = %v) couldn't UpdateTableEntry in table %s, expression='%s'", key, d.Name, expr)
			} else {
				err = fmt.Errorf("Cannot update entity with empty required fields: %v", emptyFields)
			}
		}
	}
	return 
}


// CreateOrUpdateUnsafe saves the CapabilityCommunity regardless of if it exists.
func (d DAOImpl) CreateOrUpdateUnsafe(capabilityCommunity CapabilityCommunity) {
	err2 := d.CreateOrUpdate(capabilityCommunity)
	core.ErrorHandler(err2, d.Namespace, fmt.Sprintf("could not create or update %v in %s\n", capabilityCommunity, d.Name))
}


// Delete removes CapabilityCommunity from db
func (d DAOImpl)Delete(platformID common.PlatformID, id string) error {
	return d.Dynamo.DeleteEntry(d.Name, idParams(platformID, id))
}


// DeleteUnsafe deletes CapabilityCommunity and panics in case of errors.
func (d DAOImpl)DeleteUnsafe(platformID common.PlatformID, id string) {
	err2 := d.Delete(platformID, id)
	core.ErrorHandler(err2, d.Namespace, fmt.Sprintf("Could not delete platformID==%s, id==%s in %s\n", platformID, id, d.Name))
}


func (d DAOImpl)ReadByPlatformID(platformID common.PlatformID) (out []CapabilityCommunity, err error) {
	var instances []CapabilityCommunity
	err = d.Dynamo.QueryTableWithIndex(d.Name, awsutils.DynamoIndexExpression{
		IndexName: "PlatformIDIndex",
		Condition: "platform_id = :a0",
		Attributes: map[string]interface{}{
			":a0": platformID,
		},
	}, map[string]string{}, true, -1, &instances)
	out = instances
	return
}


func (d DAOImpl)ReadByPlatformIDUnsafe(platformID common.PlatformID) (out []CapabilityCommunity) {
	out, err2 := d.ReadByPlatformID(platformID)
	core.ErrorHandler(err2, d.Namespace, fmt.Sprintf("Could not query PlatformIDIndex on %s table\n", d.Name))
	return
}

func idParams(platformID common.PlatformID, id string) map[string]*dynamodb.AttributeValue {
	params := map[string]*dynamodb.AttributeValue {
		"platform_id": common.DynS(string(platformID)),
		"id": common.DynS(id),
	}
	return params
}
func allParams(capabilityCommunity CapabilityCommunity, old CapabilityCommunity) (params map[string]*dynamodb.AttributeValue) {
	params = map[string]*dynamodb.AttributeValue{}
	if capabilityCommunity.PlatformID != old.PlatformID { params[":a0"] = common.DynS(string(capabilityCommunity.PlatformID)) }
	if capabilityCommunity.ID != old.ID { params[":a1"] = common.DynS(capabilityCommunity.ID) }
	if capabilityCommunity.Name != old.Name { params[":a2"] = common.DynS(capabilityCommunity.Name) }
	if capabilityCommunity.Description != old.Description { params[":a3"] = common.DynS(capabilityCommunity.Description) }
	if capabilityCommunity.Advocate != old.Advocate { params[":a4"] = common.DynS(capabilityCommunity.Advocate) }
	if capabilityCommunity.CreatedBy != old.CreatedBy { params[":a5"] = common.DynS(capabilityCommunity.CreatedBy) }
	if capabilityCommunity.CreatedAt != old.CreatedAt { params[":a6"] = common.DynS(capabilityCommunity.CreatedAt) }
	if capabilityCommunity.ModifiedAt != old.ModifiedAt { params[":a7"] = common.DynS(capabilityCommunity.ModifiedAt) }
	return
}
func updateExpression(capabilityCommunity CapabilityCommunity, old CapabilityCommunity) (expr string, params map[string]*dynamodb.AttributeValue, namesPtr *map[string]*string) {
	var updateParts []string
	params = map[string]*dynamodb.AttributeValue{}
	names := map[string]*string{}
	if capabilityCommunity.PlatformID != old.PlatformID { updateParts = append(updateParts, "platform_id = :a0"); params[":a0"] = common.DynS(string(capabilityCommunity.PlatformID));  }
	if capabilityCommunity.ID != old.ID { updateParts = append(updateParts, "id = :a1"); params[":a1"] = common.DynS(capabilityCommunity.ID);  }
	if capabilityCommunity.Name != old.Name { updateParts = append(updateParts, "#name = :a2"); params[":a2"] = common.DynS(capabilityCommunity.Name); fldName := "name"; names["#name"] = &fldName }
	if capabilityCommunity.Description != old.Description { updateParts = append(updateParts, "description = :a3"); params[":a3"] = common.DynS(capabilityCommunity.Description);  }
	if capabilityCommunity.Advocate != old.Advocate { updateParts = append(updateParts, "advocate = :a4"); params[":a4"] = common.DynS(capabilityCommunity.Advocate);  }
	if capabilityCommunity.CreatedBy != old.CreatedBy { updateParts = append(updateParts, "created_by = :a5"); params[":a5"] = common.DynS(capabilityCommunity.CreatedBy);  }
	if capabilityCommunity.CreatedAt != old.CreatedAt { updateParts = append(updateParts, "created_at = :a6"); params[":a6"] = common.DynS(capabilityCommunity.CreatedAt);  }
	if capabilityCommunity.ModifiedAt != old.ModifiedAt { updateParts = append(updateParts, "modified_at = :a7"); params[":a7"] = common.DynS(capabilityCommunity.ModifiedAt);  }
	expr = "set " + strings.Join(updateParts, ", ")
	if len(names) == 0 { namesPtr = nil } else { namesPtr = &names } // workaround for ValidationException: ExpressionAttributeNames must not be empty
	return
}
