package userObjectiveProgress
// This file has been automatically generated by `adaptive/scripts`
// The changes will be overridden by the next automatic generation.
import (
	"github.com/aws/aws-sdk-go/aws"
	awsutils "github.com/adaptiveteam/adaptive/aws-utils-go"
	common "github.com/adaptiveteam/adaptive/daos/common"
	core "github.com/adaptiveteam/adaptive/core-utils-go"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/pkg/errors"
	"fmt"
)


// Create saves the UserObjectiveProgress.
func Create(userObjectiveProgress UserObjectiveProgress) common.ConnectionProc {
	return func (conn common.DynamoDBConnection) (err error) {
		emptyFields, ok := userObjectiveProgress.CollectEmptyFields()
		if ok {
			
			err = conn.Dynamo.PutTableEntry(userObjectiveProgress, TableName(conn.ClientID))
		} else {
			err = fmt.Errorf("Cannot create entity with empty fields: %v", emptyFields)
		}
		return
	}
}


// CreateUnsafe saves the UserObjectiveProgress.
func CreateUnsafe(userObjectiveProgress UserObjectiveProgress) func (conn common.DynamoDBConnection) {
	return func (conn common.DynamoDBConnection) {
		err2 := Create(userObjectiveProgress)(conn)
		core.ErrorHandler(err2, "daos/UserObjectiveProgress", fmt.Sprintf("Could not create id==%s, createdOn==%s in %s\n", userObjectiveProgress.ID, userObjectiveProgress.CreatedOn, TableName(conn.ClientID)))
	}
}


// Read reads UserObjectiveProgress
func Read(id string, createdOn string) func (conn common.DynamoDBConnection) (out UserObjectiveProgress, err error) {
	return func (conn common.DynamoDBConnection) (out UserObjectiveProgress, err error) {
		var outs []UserObjectiveProgress
		outs, err = ReadOrEmpty(id, createdOn)(conn)
		if err == nil && len(outs) == 0 {
			err = fmt.Errorf("Not found id==%s, createdOn==%s in %s\n", id, createdOn, TableName(conn.ClientID))
		}
		if len(outs) > 0 {
			out = outs[0]
		}
		return
	}
}


// ReadUnsafe reads the UserObjectiveProgress. Panics in case of any errors
func ReadUnsafe(id string, createdOn string) func (conn common.DynamoDBConnection) UserObjectiveProgress {
	return func (conn common.DynamoDBConnection) UserObjectiveProgress {
		out, err2 := Read(id, createdOn)(conn)
		core.ErrorHandler(err2, "daos/UserObjectiveProgress", fmt.Sprintf("Error reading id==%s, createdOn==%s in %s\n", id, createdOn, TableName(conn.ClientID)))
		return out
	}
}


// ReadOrEmpty reads UserObjectiveProgress
func ReadOrEmpty(id string, createdOn string) func (conn common.DynamoDBConnection) (out []UserObjectiveProgress, err error) {
	return func (conn common.DynamoDBConnection) (out []UserObjectiveProgress, err error) {
		var outOrEmpty UserObjectiveProgress
		ids := idParams(id, createdOn)
		var found bool
		found, err = conn.Dynamo.GetItemOrEmptyFromTable(TableName(conn.ClientID), ids, &outOrEmpty)
		if found {
			if outOrEmpty.ID == id && outOrEmpty.CreatedOn == createdOn {
				out = append(out, outOrEmpty)
			} else {
				err = fmt.Errorf("Requested ids: id==%s, createdOn==%s are different from the found ones: id==%s, createdOn==%s", id, createdOn, outOrEmpty.ID, outOrEmpty.CreatedOn) // unexpected error: found ids != ids
			}
		}
		err = errors.Wrapf(err, "UserObjectiveProgress DAO.ReadOrEmpty(id = %v) couldn't GetItem in table %s", ids, TableName(conn.ClientID))
		return
	}
}


// ReadOrEmptyUnsafe reads the UserObjectiveProgress. Panics in case of any errors
func ReadOrEmptyUnsafe(id string, createdOn string) func (conn common.DynamoDBConnection) []UserObjectiveProgress {
	return func (conn common.DynamoDBConnection) []UserObjectiveProgress {
		out, err2 := ReadOrEmpty(id, createdOn)(conn)
		core.ErrorHandler(err2, "daos/UserObjectiveProgress", fmt.Sprintf("Error while reading id==%s, createdOn==%s in %s\n", id, createdOn, TableName(conn.ClientID)))
		return out
	}
}


// CreateOrUpdate saves the UserObjectiveProgress regardless of if it exists.
func CreateOrUpdate(userObjectiveProgress UserObjectiveProgress) common.ConnectionProc {
	return func (conn common.DynamoDBConnection) (err error) {
		
		var olds []UserObjectiveProgress
		olds, err = ReadOrEmpty(userObjectiveProgress.ID, userObjectiveProgress.CreatedOn)(conn)
		err = errors.Wrapf(err, "UserObjectiveProgress DAO.CreateOrUpdate(id = id==%s, createdOn==%s) couldn't ReadOrEmpty", userObjectiveProgress.ID, userObjectiveProgress.CreatedOn)
		if err == nil {
			if len(olds) == 0 {
				err = Create(userObjectiveProgress)(conn)
				err = errors.Wrapf(err, "UserObjectiveProgress DAO.CreateOrUpdate couldn't Create in table %s", TableName(conn.ClientID))
			} else {
				emptyFields, ok := userObjectiveProgress.CollectEmptyFields()
				if ok {
					old := olds[0]
					
					
					key := idParams(old.ID, old.CreatedOn)
					expr, exprAttributes, names := updateExpression(userObjectiveProgress, old)
					input := dynamodb.UpdateItemInput{
						ExpressionAttributeValues: exprAttributes,
						TableName:                 aws.String(TableName(conn.ClientID)),
						Key:                       key,
						ReturnValues:              aws.String("UPDATED_NEW"),
						UpdateExpression:          aws.String(expr),
					}
					if names != nil { input.ExpressionAttributeNames = *names } // workaround for a pointer to an empty slice
					if  len(exprAttributes) > 0 { // if there some changes
						err = conn.Dynamo.UpdateItemInternal(input)
					} else {
						// WARN: no changes.
					}
					err = errors.Wrapf(err, "UserObjectiveProgress DAO.CreateOrUpdate(id = %v) couldn't UpdateTableEntry in table %s, expression='%s'", key, TableName(conn.ClientID), expr)
				} else {
					err = fmt.Errorf("Cannot update entity with empty required fields: %v", emptyFields)
				}
			}
		}
		return 
	}
}


// CreateOrUpdateUnsafe saves the UserObjectiveProgress regardless of if it exists.
func CreateOrUpdateUnsafe(userObjectiveProgress UserObjectiveProgress) func (conn common.DynamoDBConnection) {
	return func (conn common.DynamoDBConnection) {
		err2 := CreateOrUpdate(userObjectiveProgress)(conn)
		core.ErrorHandler(err2, "daos/UserObjectiveProgress", fmt.Sprintf("could not create or update %v in %s\n", userObjectiveProgress, TableName(conn.ClientID)))
	}
}


// Delete removes UserObjectiveProgress from db
func Delete(id string, createdOn string) func (conn common.DynamoDBConnection) error {
	return func (conn common.DynamoDBConnection) error {
		return conn.Dynamo.DeleteEntry(TableName(conn.ClientID), idParams(id, createdOn))
	}
}


// DeleteUnsafe deletes UserObjectiveProgress and panics in case of errors.
func DeleteUnsafe(id string, createdOn string) func (conn common.DynamoDBConnection) {
	return func (conn common.DynamoDBConnection) {
		err2 := Delete(id, createdOn)(conn)
		core.ErrorHandler(err2, "daos/UserObjectiveProgress", fmt.Sprintf("Could not delete id==%s, createdOn==%s in %s\n", id, createdOn, TableName(conn.ClientID)))
	}
}


func ReadByID(id string) func (conn common.DynamoDBConnection) (out []UserObjectiveProgress, err error) {
	return func (conn common.DynamoDBConnection) (out []UserObjectiveProgress, err error) {
		var instances []UserObjectiveProgress
		err = conn.Dynamo.QueryTableWithIndex(TableName(conn.ClientID), awsutils.DynamoIndexExpression{
			IndexName: "IDIndex",
			Condition: "id = :a0",
			Attributes: map[string]interface{}{
				":a0": id,
			},
		}, map[string]string{}, true, -1, &instances)
		out = instances
		return
	}
}


func ReadByIDUnsafe(id string) func (conn common.DynamoDBConnection) (out []UserObjectiveProgress) {
	return func (conn common.DynamoDBConnection) (out []UserObjectiveProgress) {
		out, err2 := ReadByID(id)(conn)
		core.ErrorHandler(err2, "daos/UserObjectiveProgress", fmt.Sprintf("Could not query IDIndex on %s table\n", TableName(conn.ClientID)))
		return
	}
}


func ReadByCreatedOn(createdOn string) func (conn common.DynamoDBConnection) (out []UserObjectiveProgress, err error) {
	return func (conn common.DynamoDBConnection) (out []UserObjectiveProgress, err error) {
		var instances []UserObjectiveProgress
		err = conn.Dynamo.QueryTableWithIndex(TableName(conn.ClientID), awsutils.DynamoIndexExpression{
			IndexName: "CreatedOnIndex",
			Condition: "created_on = :a0",
			Attributes: map[string]interface{}{
				":a0": createdOn,
			},
		}, map[string]string{}, true, -1, &instances)
		out = instances
		return
	}
}


func ReadByCreatedOnUnsafe(createdOn string) func (conn common.DynamoDBConnection) (out []UserObjectiveProgress) {
	return func (conn common.DynamoDBConnection) (out []UserObjectiveProgress) {
		out, err2 := ReadByCreatedOn(createdOn)(conn)
		core.ErrorHandler(err2, "daos/UserObjectiveProgress", fmt.Sprintf("Could not query CreatedOnIndex on %s table\n", TableName(conn.ClientID)))
		return
	}
}

